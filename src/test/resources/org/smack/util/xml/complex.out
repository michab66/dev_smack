/**
 * Generated.
 */
public class Dids {
/** Vehicle Odometer in Low Resolution */
public static class Vehicle_Odometer_in_Low_Resolution {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Odometer_in_Low_Resolution) 
    private final byte[] _buffer = new byte[+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Odometer_in_Low_Resolution) 
    
     private static int SIZE = 0;
    private static final int Offset$Vehicle_Odometer_in_Low_Resolution = SIZE  += 255;
    
    }// tplMakeInitializer(Vehicle_Odometer_in_Low_Resolution) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Odometer_in_Low_Resolution other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Vehicle_Odometer_in_Low_Resolution = new  byte[255];
--content--
  public Vehicle_Odometer_in_Low_Resolution( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Current Operating Time */
public static class Current_Operating_Time {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Current_Operating_Time) 
    private final byte[] _buffer = new byte[+5];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Current_Operating_Time) 
    
     private static int SIZE = 0;
    private static final int Offset$Operating_Time = SIZE  += 5;
    
    }// tplMakeInitializer(Current_Operating_Time) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 5;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Current_Operating_Time other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Operating_Time = new  byte[5];
--content--
  public Current_Operating_Time( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle Odometer */
public static class Vehicle_Odometer {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Odometer) 
    private final byte[] _buffer = new byte[+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Odometer) 
    
     private static int SIZE = 0;
    private static final int Offset$Vehicle_Odometer = SIZE  += 255;
    
    }// tplMakeInitializer(Vehicle_Odometer) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Odometer other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Vehicle_Odometer = new  byte[255];
--content--
  public Vehicle_Odometer( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Read LIN Configuration */
public static class Read_LIN_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Read_LIN_Configuration) 
    private final byte[] _buffer = new byte[+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Read_LIN_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$LIN_Slope_Mode = SIZE  += 1;
    private static final int Offset$TxD_Dominant_LIN_Timeout_Mode = SIZE  += 1;
    private static final int Offset$LIN_Wakeup_Capability_Mode = SIZE  += 1;
    
    }// tplMakeInitializer(Read_LIN_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Read_LIN_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] LIN_Slope_Mode = new  byte[1];
 DO  final byte[] TxD_Dominant_LIN_Timeout_Mode = new  byte[1];
 DO  final byte[] LIN_Wakeup_Capability_Mode = new  byte[1];
--content--
  public Read_LIN_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** High Voltage Value */
public static class High_Voltage_Value {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(High_Voltage_Value) 
    private final byte[] _buffer = new byte[+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(High_Voltage_Value) 
    
     private static int SIZE = 0;
    private static final int Offset$High_Voltage_Value = SIZE  += 255;
    
    }// tplMakeInitializer(High_Voltage_Value) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( High_Voltage_Value other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] High_Voltage_Value = new  byte[255];
--content--
  public High_Voltage_Value( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Number of SAR Write Cycles */
public static class Number_of_SAR_Write_Cycles {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Number_of_SAR_Write_Cycles) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Number_of_SAR_Write_Cycles) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_SAR_Write_Cycles = SIZE  += 1;
    private static final int Offset$Max_Number_of_SAR_Write_Cycles = SIZE  += 1;
    
    }// tplMakeInitializer(Number_of_SAR_Write_Cycles) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Number_of_SAR_Write_Cycles other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_SAR_Write_Cycles = new  byte[1];
 DO  final byte[] Max_Number_of_SAR_Write_Cycles = new  byte[1];
--content--
  public Number_of_SAR_Write_Cycles( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Obsolescence Data */
public static class Obsolescence_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Obsolescence_Data) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Obsolescence_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$Obsolescence_Data_Block = SIZE  += ;
    
    }// tplMakeInitializer(Obsolescence_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Obsolescence_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Obsolescence_Data_Block = new  byte[];
--content--
  public Obsolescence_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Consumable Data */
public static class Consumable_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Consumable_Data) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Consumable_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$Consumable_Data_Block = SIZE  += ;
    
    }// tplMakeInitializer(Consumable_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Consumable_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Consumable_Data_Block = new  byte[];
--content--
  public Consumable_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Availability Data */
public static class Availability_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Availability_Data) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Availability_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$Availability_Data_of_System_or_Function = SIZE  += ;
    
    }// tplMakeInitializer(Availability_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Availability_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Availability_Data_of_System_or_Function = new  byte[];
--content--
  public Availability_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RBM HEX Gasoline */
public static class RBM_HEX_Gasoline {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RBM_HEX_Gasoline) 
    private final byte[] _buffer = new byte[+1+1+1+120];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RBM_HEX_Gasoline) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_data_items = SIZE  += 1;
    private static final int Offset$General_Denominator = SIZE  += 1;
    private static final int Offset$Ignition_Cycle_Counter = SIZE  += 1;
    private static final int Offset$Data_dump = SIZE  += 120;
    
    }// tplMakeInitializer(RBM_HEX_Gasoline) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 120;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RBM_HEX_Gasoline other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_data_items = new  byte[1];
 DO  final byte[] General_Denominator = new  byte[1];
 DO  final byte[] Ignition_Cycle_Counter = new  byte[1];
 DO  final byte[] Data_dump = new  byte[120];
--content--
  public RBM_HEX_Gasoline( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RBM HEX Diesel */
public static class RBM_HEX_Diesel {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RBM_HEX_Diesel) 
    private final byte[] _buffer = new byte[+1+1+1+120];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RBM_HEX_Diesel) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_data_items = SIZE  += 1;
    private static final int Offset$General_Denominator = SIZE  += 1;
    private static final int Offset$Ignition_Cycle_Counter = SIZE  += 1;
    private static final int Offset$Data_dump = SIZE  += 120;
    
    }// tplMakeInitializer(RBM_HEX_Diesel) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 120;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RBM_HEX_Diesel other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_data_items = new  byte[1];
 DO  final byte[] General_Denominator = new  byte[1];
 DO  final byte[] Ignition_Cycle_Counter = new  byte[1];
 DO  final byte[] Data_dump = new  byte[120];
--content--
  public RBM_HEX_Diesel( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Reprogramming Attempt Counter */
public static class Reprogramming_Attempt_Counter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Reprogramming_Attempt_Counter) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Reprogramming_Attempt_Counter) 
    
     private static int SIZE = 0;
    private static final int Offset$Reprogramming_Attempts = SIZE  += ;
    
    }// tplMakeInitializer(Reprogramming_Attempt_Counter) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Reprogramming_Attempt_Counter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Reprogramming_Attempts = new  byte[];
--content--
  public Reprogramming_Attempt_Counter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Diagnostic Trace Memory */
public static class Diagnostic_Trace_Memory {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Diagnostic_Trace_Memory) 
    private final byte[] _buffer = new byte[+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Diagnostic_Trace_Memory) 
    
     private static int SIZE = 0;
    private static final int Offset$Diagnostic_Trace_Memory = SIZE  += 64;
    
    }// tplMakeInitializer(Diagnostic_Trace_Memory) 
    
    {
        int currentOffset = 0;
        copyTo( 0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Diagnostic_Trace_Memory other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Diagnostic_Trace_Memory = new  byte[64];
--content--
  public Diagnostic_Trace_Memory( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Usage Histogram */
public static class Usage_Histogram {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Usage_Histogram) 
    private final byte[] _buffer = new byte[+4092];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Usage_Histogram) 
    
     private static int SIZE = 0;
    private static final int Offset$Usage_Histogram_data = SIZE  += 4092;
    
    }// tplMakeInitializer(Usage_Histogram) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4092;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Usage_Histogram other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Usage_Histogram_data = new  byte[4092];
--content--
  public Usage_Histogram( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Common Event Ring Memory */
public static class Common_Event_Ring_Memory {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Common_Event_Ring_Memory) 
    private final byte[] _buffer = new byte[+1+1+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Common_Event_Ring_Memory) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_possible_Common_Events = SIZE  += 1;
    private static final int Offset$Common_Event_Record_Size_in_Bytes = SIZE  += 1;
    private static final int Offset$Most_recent_Common_Event_Record = SIZE  += ;
    
    }// tplMakeInitializer(Common_Event_Ring_Memory) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Common_Event_Ring_Memory other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_possible_Common_Events = new  byte[1];
 DO  final byte[] Common_Event_Record_Size_in_Bytes = new  byte[1];
 DO  final byte[] Most_recent_Common_Event_Record = new  byte[];
--content--
  public Common_Event_Ring_Memory( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Adjust ISO 15765-2 BS and STmin Parameter */
public static class Adjust_ISO_15765_2_BS_and_STmin_Parameter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Adjust_ISO_15765_2_BS_and_STmin_Parameter) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Adjust_ISO_15765_2_BS_and_STmin_Parameter) 
    
     private static int SIZE = 0;
    private static final int Offset$Block_Size_Value_as_defined_in_ISO_15765_2 = SIZE  += 1;
    private static final int Offset$STmin_Value_as_defined_in_ISO_15765_2 = SIZE  += 1;
    
    }// tplMakeInitializer(Adjust_ISO_15765_2_BS_and_STmin_Parameter) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Adjust_ISO_15765_2_BS_and_STmin_Parameter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Block_Size_Value_as_defined_in_ISO_15765_2 = new  byte[1];
 DO  final byte[] STmin_Value_as_defined_in_ISO_15765_2 = new  byte[1];
--content--
  public Adjust_ISO_15765_2_BS_and_STmin_Parameter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Read Stored EVC Configuration */
public static class Read_Stored_EVC_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Read_Stored_EVC_Configuration) 
    private final byte[] _buffer = new byte[+1+8];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Read_Stored_EVC_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_detected_EVC_Config_changes = SIZE  += 1;
    private static final int Offset$EVC_Configuration_data_record_1 = SIZE  += 8;
    
    }// tplMakeInitializer(Read_Stored_EVC_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 8;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Read_Stored_EVC_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_detected_EVC_Config_changes = new  byte[1];
 DO  final byte[] EVC_Configuration_data_record_1 = new  byte[8];
--content--
  public Read_Stored_EVC_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Reprogramming Resume Information */
public static class Reprogramming_Resume_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Reprogramming_Resume_Information) 
    private final byte[] _buffer = new byte[+1+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Reprogramming_Resume_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$AddressAndLengthFormatIdentifier = SIZE  += 1;
    private static final int Offset$Restart_Address = SIZE  += ;
    
    }// tplMakeInitializer(Reprogramming_Resume_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Reprogramming_Resume_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] AddressAndLengthFormatIdentifier = new  byte[1];
 DO  final byte[] Restart_Address = new  byte[];
--content--
  public Reprogramming_Resume_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Activate Supplier Specific Messages */
public static class Activate_Supplier_Specific_Messages {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Activate_Supplier_Specific_Messages) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Activate_Supplier_Specific_Messages) 
    
     private static int SIZE = 0;
    private static final int Offset$Supplier_Specific_Message_Mode = SIZE  += 1;
    
    }// tplMakeInitializer(Activate_Supplier_Specific_Messages) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Activate_Supplier_Specific_Messages other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Supplier_Specific_Message_Mode = new  byte[1];
--content--
  public Activate_Supplier_Specific_Messages( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Adjust ISO 10681-2 Bandwidth Control Parameters */
public static class Adjust_ISO_10681_2_Bandwidth_Control_Parameters {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Adjust_ISO_10681_2_Bandwidth_Control_Parameters) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Adjust_ISO_10681_2_Bandwidth_Control_Parameters) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Adjust_ISO_10681_2_Bandwidth_Control_Parameters) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Adjust_ISO_10681_2_Bandwidth_Control_Parameters other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Adjust_ISO_10681_2_Bandwidth_Control_Parameters( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** High Voltage Lock */
public static class High_Voltage_Lock {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(High_Voltage_Lock) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(High_Voltage_Lock) 
    
     private static int SIZE = 0;
    private static final int Offset$HV_Lock_Status = SIZE  += 1;
    
    }// tplMakeInitializer(High_Voltage_Lock) 
    
    {
        int currentOffset = 0;
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( High_Voltage_Lock other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] HV_Lock_Status = new  byte[1];
--content--
  public High_Voltage_Lock( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Engine Style */
public static class Engine_Style {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Engine_Style) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Engine_Style) 
    
     private static int SIZE = 0;
    private static final int Offset$Engine_Style = SIZE  += 1;
    
    }// tplMakeInitializer(Engine_Style) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Engine_Style other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Engine_Style = new  byte[1];
--content--
  public Engine_Style( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Activate Partial Networking Mode */
public static class Activate_Partial_Networking_Mode {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Activate_Partial_Networking_Mode) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Activate_Partial_Networking_Mode) 
    
     private static int SIZE = 0;
    private static final int Offset$Partial_Networking_Mode = SIZE  += 1;
    
    }// tplMakeInitializer(Activate_Partial_Networking_Mode) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Activate_Partial_Networking_Mode other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Partial_Networking_Mode = new  byte[1];
--content--
  public Activate_Partial_Networking_Mode( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Activate SAR Data Storage */
public static class Activate_SAR_Data_Storage {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Activate_SAR_Data_Storage) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Activate_SAR_Data_Storage) 
    
     private static int SIZE = 0;
    private static final int Offset$SAR_Data_Storage_Status = SIZE  += 1;
    
    }// tplMakeInitializer(Activate_SAR_Data_Storage) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Activate_SAR_Data_Storage other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SAR_Data_Storage_Status = new  byte[1];
--content--
  public Activate_SAR_Data_Storage( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Operating Time of Last Ignition Cycle */
public static class Operating_Time_of_Last_Ignition_Cycle {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Operating_Time_of_Last_Ignition_Cycle) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Operating_Time_of_Last_Ignition_Cycle) 
    
     private static int SIZE = 0;
    private static final int Offset$Operating_Time_last_ignition_cycle = SIZE  += 1;
    
    }// tplMakeInitializer(Operating_Time_of_Last_Ignition_Cycle) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Operating_Time_of_Last_Ignition_Cycle other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Operating_Time_last_ignition_cycle = new  byte[1];
--content--
  public Operating_Time_of_Last_Ignition_Cycle( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SAR Trigger Counter */
public static class SAR_Trigger_Counter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SAR_Trigger_Counter) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SAR_Trigger_Counter) 
    
     private static int SIZE = 0;
    private static final int Offset$Trigger = SIZE  += ;
    
    }// tplMakeInitializer(SAR_Trigger_Counter) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SAR_Trigger_Counter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Trigger = new  byte[];
--content--
  public SAR_Trigger_Counter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Configure SAR Trigger Events */
public static class Configure_SAR_Trigger_Events {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Configure_SAR_Trigger_Events) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Configure_SAR_Trigger_Events) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Configure_SAR_Trigger_Events) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Configure_SAR_Trigger_Events other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Configure_SAR_Trigger_Events( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Enable SAR Memory Overwrite */
public static class Enable_SAR_Memory_Overwrite {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Enable_SAR_Memory_Overwrite) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Enable_SAR_Memory_Overwrite) 
    
     private static int SIZE = 0;
    private static final int Offset$SAR_Memory_Overwrite = SIZE  += 1;
    
    }// tplMakeInitializer(Enable_SAR_Memory_Overwrite) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Enable_SAR_Memory_Overwrite other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SAR_Memory_Overwrite = new  byte[1];
--content--
  public Enable_SAR_Memory_Overwrite( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Link Quality */
public static class Ethernet_Link_Quality {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Link_Quality) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Link_Quality) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Link_Quality_Link = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Link_Quality) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Link_Quality other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Link_Quality_Link = new  byte[];
--content--
  public Ethernet_Link_Quality( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Switch Counters */
public static class Ethernet_Switch_Counters {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Switch_Counters) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Switch_Counters) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Switch_Counters_Port = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Switch_Counters) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Switch_Counters other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Switch_Counters_Port = new  byte[];
--content--
  public Ethernet_Switch_Counters( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Drop Counters */
public static class Ethernet_Drop_Counters {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Drop_Counters) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Drop_Counters) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Drop_Counters_Port = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Drop_Counters) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Drop_Counters other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Drop_Counters_Port = new  byte[];
--content--
  public Ethernet_Drop_Counters( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet MIB Counters */
public static class Ethernet_MIB_Counters {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_MIB_Counters) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_MIB_Counters) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_MIB_Counters_Port = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_MIB_Counters) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_MIB_Counters other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_MIB_Counters_Port = new  byte[];
--content--
  public Ethernet_MIB_Counters( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Link Statistics */
public static class Ethernet_Link_Statistics {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Link_Statistics) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Link_Statistics) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Link_Statistics_Port = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Link_Statistics) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Link_Statistics other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Link_Statistics_Port = new  byte[];
--content--
  public Ethernet_Link_Statistics( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Link Status */
public static class Ethernet_Link_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Link_Status) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Link_Status) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Link_Status_Link = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Link_Status) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Link_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Link_Status_Link = new  byte[];
--content--
  public Ethernet_Link_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Port Status */
public static class Ethernet_Port_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Port_Status) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Port_Status) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Port_Status_Link = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Port_Status) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Port_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Port_Status_Link = new  byte[];
--content--
  public Ethernet_Port_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Wake-up Line Status */
public static class Ethernet_Wake_up_Line_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Wake_up_Line_Status) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Wake_up_Line_Status) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Ethernet_Wake_up_Line_Status) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Wake_up_Line_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Ethernet_Wake_up_Line_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Wake-up Line Activation */
public static class Ethernet_Wake_up_Line_Activation {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Wake_up_Line_Activation) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Wake_up_Line_Activation) 
    
     private static int SIZE = 0;
    private static final int Offset$Wake_up_Lines_Activated = SIZE  += 1;
    
    }// tplMakeInitializer(Ethernet_Wake_up_Line_Activation) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Wake_up_Line_Activation other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Wake_up_Lines_Activated = new  byte[1];
--content--
  public Ethernet_Wake_up_Line_Activation( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Wake-up Line Pulse Counter */
public static class Ethernet_Wake_up_Line_Pulse_Counter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Wake_up_Line_Pulse_Counter) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Wake_up_Line_Pulse_Counter) 
    
     private static int SIZE = 0;
    private static final int Offset$Wake_up_Line_Pulse_Counter_Wake_Up_Line = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Wake_up_Line_Pulse_Counter) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Wake_up_Line_Pulse_Counter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Wake_up_Line_Pulse_Counter_Wake_Up_Line = new  byte[];
--content--
  public Ethernet_Wake_up_Line_Pulse_Counter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Transceiver Identification */
public static class Ethernet_Transceiver_Identification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Transceiver_Identification) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Transceiver_Identification) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Transceiver_Identification_Link = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Transceiver_Identification) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Transceiver_Identification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Transceiver_Identification_Link = new  byte[];
--content--
  public Ethernet_Transceiver_Identification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Switch Identification */
public static class Ethernet_Switch_Identification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Switch_Identification) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Switch_Identification) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Switch_Identification_Link = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Switch_Identification) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Switch_Identification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Switch_Identification_Link = new  byte[];
--content--
  public Ethernet_Switch_Identification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Write Ethernet Port Mirroring Configuration */
public static class Write_Ethernet_Port_Mirroring_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Write_Ethernet_Port_Mirroring_Configuration) 
    private final byte[] _buffer = new byte[+1+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Write_Ethernet_Port_Mirroring_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$Set_Selection = SIZE  += 1;
    private static final int Offset$EthernetPortConfiguration = SIZE  += 64;
    
    }// tplMakeInitializer(Write_Ethernet_Port_Mirroring_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Write_Ethernet_Port_Mirroring_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Set_Selection = new  byte[1];
 DO  final byte[] EthernetPortConfiguration = new  byte[64];
--content--
  public Write_Ethernet_Port_Mirroring_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Read Ethernet Port Mirroring Configuration */
public static class Read_Ethernet_Port_Mirroring_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Read_Ethernet_Port_Mirroring_Configuration) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Read_Ethernet_Port_Mirroring_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$Link = SIZE  += ;
    
    }// tplMakeInitializer(Read_Ethernet_Port_Mirroring_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Read_Ethernet_Port_Mirroring_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Link = new  byte[];
--content--
  public Read_Ethernet_Port_Mirroring_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Port Mirroring Status */
public static class Ethernet_Port_Mirroring_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Port_Mirroring_Status) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Port_Mirroring_Status) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Port_Mirroring_Status = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Port_Mirroring_Status) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Port_Mirroring_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Port_Mirroring_Status = new  byte[];
--content--
  public Ethernet_Port_Mirroring_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet MAC and IP Addresses */
public static class Ethernet_MAC_and_IP_Addresses {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_MAC_and_IP_Addresses) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_MAC_and_IP_Addresses) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_MAC_and_IP_Addresses_Set = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_MAC_and_IP_Addresses) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_MAC_and_IP_Addresses other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_MAC_and_IP_Addresses_Set = new  byte[];
--content--
  public Ethernet_MAC_and_IP_Addresses( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Switch Address Table */
public static class Ethernet_Switch_Address_Table {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Switch_Address_Table) 
    private final byte[] _buffer = new byte[+4608];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Switch_Address_Table) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Switch_Address_Table_Block = SIZE  += 4608;
    
    }// tplMakeInitializer(Ethernet_Switch_Address_Table) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4608;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Switch_Address_Table other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Switch_Address_Table_Block = new  byte[4608];
--content--
  public Ethernet_Switch_Address_Table( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Hardware Configuration */
public static class Ethernet_Hardware_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Hardware_Configuration) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Hardware_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_Host_CPUs = SIZE  += 1;
    private static final int Offset$Number_of_Switches = SIZE  += 1;
    
    }// tplMakeInitializer(Ethernet_Hardware_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Hardware_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_Host_CPUs = new  byte[1];
 DO  final byte[] Number_of_Switches = new  byte[1];
--content--
  public Ethernet_Hardware_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Switch Configuration */
public static class Ethernet_Switch_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Switch_Configuration) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Switch_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Switch_Configuration = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Switch_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Switch_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Switch_Configuration = new  byte[];
--content--
  public Ethernet_Switch_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet Link Training Duration */
public static class Ethernet_Link_Training_Duration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_Link_Training_Duration) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_Link_Training_Duration) 
    
     private static int SIZE = 0;
    private static final int Offset$Ethernet_Link_Training_Duration_Link = SIZE  += ;
    
    }// tplMakeInitializer(Ethernet_Link_Training_Duration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_Link_Training_Duration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ethernet_Link_Training_Duration_Link = new  byte[];
--content--
  public Ethernet_Link_Training_Duration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** FlexRay Configuration Information */
public static class FlexRay_Configuration_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(FlexRay_Configuration_Information) 
    private final byte[] _buffer = new byte[+1+74];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(FlexRay_Configuration_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Network_ID = SIZE  += 1;
    private static final int Offset$FlexRay_Configuration = SIZE  += 74;
    
    }// tplMakeInitializer(FlexRay_Configuration_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 74;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( FlexRay_Configuration_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Network_ID = new  byte[1];
 DO  final byte[] FlexRay_Configuration = new  byte[74];
--content--
  public FlexRay_Configuration_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** FlexRay Node Information */
public static class FlexRay_Node_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(FlexRay_Node_Information) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(FlexRay_Node_Information) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(FlexRay_Node_Information) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( FlexRay_Node_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public FlexRay_Node_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECU Extract Version */
public static class ECU_Extract_Version {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECU_Extract_Version) 
    private final byte[] _buffer = new byte[+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECU_Extract_Version) 
    
     private static int SIZE = 0;
    private static final int Offset$Major_Version = SIZE  += 1;
    private static final int Offset$Minor_Version = SIZE  += 1;
    private static final int Offset$Patch_Version = SIZE  += 1;
    
    }// tplMakeInitializer(ECU_Extract_Version) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECU_Extract_Version other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Major_Version = new  byte[1];
 DO  final byte[] Minor_Version = new  byte[1];
 DO  final byte[] Patch_Version = new  byte[1];
--content--
  public ECU_Extract_Version( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Standard Reprogramming SW Package Information */
public static class Standard_Reprogramming_SW_Package_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Standard_Reprogramming_SW_Package_Information) 
    private final byte[] _buffer = new byte[+1+1+1+1+10+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Standard_Reprogramming_SW_Package_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Standard_Reprogramming_SW_Package_Major_Version = SIZE  += 1;
    private static final int Offset$Standard_Reprogramming_SW_Package_Minor_Version = SIZE  += 1;
    private static final int Offset$Standard_Reprogramming_SW_Package_Patch_Level = SIZE  += 1;
    private static final int Offset$Standard_Reprogramming_SW_Package_Build_Version = SIZE  += 1;
    private static final int Offset$_C_Identification = SIZE  += 10;
    private static final int Offset$Supplier_Identification = SIZE  += 1;
    
    }// tplMakeInitializer(Standard_Reprogramming_SW_Package_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 10;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Standard_Reprogramming_SW_Package_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Standard_Reprogramming_SW_Package_Major_Version = new  byte[1];
 DO  final byte[] Standard_Reprogramming_SW_Package_Minor_Version = new  byte[1];
 DO  final byte[] Standard_Reprogramming_SW_Package_Patch_Level = new  byte[1];
 DO  final byte[] Standard_Reprogramming_SW_Package_Build_Version = new  byte[1];
 DO  final byte[] _C_Identification = new  byte[10];
 DO  final byte[] Supplier_Identification = new  byte[1];
--content--
  public Standard_Reprogramming_SW_Package_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Standard Application SW Package Information */
public static class Standard_Application_SW_Package_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Standard_Application_SW_Package_Information) 
    private final byte[] _buffer = new byte[+1+1+1+1+10+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Standard_Application_SW_Package_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Standard_Application_SW_Package_Major_Version = SIZE  += 1;
    private static final int Offset$Standard_Application_SW_Package_Minor_Version = SIZE  += 1;
    private static final int Offset$Standard_Application_SW_Package_Patch_Level = SIZE  += 1;
    private static final int Offset$Standard_Application_SW_Package_Build_Version = SIZE  += 1;
    private static final int Offset$_C_Identification = SIZE  += 10;
    private static final int Offset$Supplier_Identification = SIZE  += 1;
    
    }// tplMakeInitializer(Standard_Application_SW_Package_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 10;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Standard_Application_SW_Package_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Standard_Application_SW_Package_Major_Version = new  byte[1];
 DO  final byte[] Standard_Application_SW_Package_Minor_Version = new  byte[1];
 DO  final byte[] Standard_Application_SW_Package_Patch_Level = new  byte[1];
 DO  final byte[] Standard_Application_SW_Package_Build_Version = new  byte[1];
 DO  final byte[] _C_Identification = new  byte[10];
 DO  final byte[] Supplier_Identification = new  byte[1];
--content--
  public Standard_Application_SW_Package_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Active Diagnostic Information */
public static class Active_Diagnostic_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Active_Diagnostic_Information) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Active_Diagnostic_Information) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Active_Diagnostic_Information) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Active_Diagnostic_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Active_Diagnostic_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** FINAS Number */
public static class FINAS_Number {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(FINAS_Number) 
    private final byte[] _buffer = new byte[+19+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(FINAS_Number) 
    
     private static int SIZE = 0;
    private static final int Offset$FINAS_Number = SIZE  += 19;
    private static final int Offset$Null_Termination = SIZE  += 1;
    
    }// tplMakeInitializer(FINAS_Number) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 19;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( FINAS_Number other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] FINAS_Number = new  byte[19];
 DO  final byte[] Null_Termination = new  byte[1];
--content--
  public FINAS_Number( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vedoc Relevant Information */
public static class Vedoc_Relevant_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vedoc_Relevant_Information) 
    private final byte[] _buffer = new byte[+10+1+4+33];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vedoc_Relevant_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Hardware_Part_Number = SIZE  += 10;
    private static final int Offset$Constant_0 = SIZE  += 1;
    private static final int Offset$Hardware_Supplier_Identification = SIZE  += 4;
    private static final int Offset$ECU_Serial_Number = SIZE  += 33;
    
    }// tplMakeInitializer(Vedoc_Relevant_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 10;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 4;
      
        // Empty.
        currentOffset += 33;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vedoc_Relevant_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Hardware_Part_Number = new  byte[10];
 DO  final byte[] Constant_0 = new  byte[1];
 DO  final byte[] Hardware_Supplier_Identification = new  byte[4];
 DO  final byte[] ECU_Serial_Number = new  byte[33];
--content--
  public Vedoc_Relevant_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Dump of Vedoc Relevant Information */
public static class Dump_of_Vedoc_Relevant_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Dump_of_Vedoc_Relevant_Information) 
    private final byte[] _buffer = new byte[+48];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Dump_of_Vedoc_Relevant_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Vedoc_Relevant_Information = SIZE  += 48;
    
    }// tplMakeInitializer(Dump_of_Vedoc_Relevant_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 48;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Dump_of_Vedoc_Relevant_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Vedoc_Relevant_Information = new  byte[48];
--content--
  public Dump_of_Vedoc_Relevant_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECU Configuration */
public static class ECU_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECU_Configuration) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECU_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$ECU_Configuration_Byte = SIZE  += ;
    
    }// tplMakeInitializer(ECU_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECU_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ECU_Configuration_Byte = new  byte[];
--content--
  public ECU_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** DDS Package Release */
public static class DDS_Package_Release {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(DDS_Package_Release) 
    private final byte[] _buffer = new byte[+2+2];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(DDS_Package_Release) 
    
     private static int SIZE = 0;
    private static final int Offset$DDS_Package_Release_of_Application_Software = SIZE  += 2;
    private static final int Offset$DDS_Package_Release_of_Boot_Software = SIZE  += 2;
    
    }// tplMakeInitializer(DDS_Package_Release) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 2;
      
        // Empty.
        currentOffset += 2;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( DDS_Package_Release other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DDS_Package_Release_of_Application_Software = new  byte[2];
 DO  final byte[] DDS_Package_Release_of_Boot_Software = new  byte[2];
--content--
  public DDS_Package_Release( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Hardware Part Number x Xxxxxxx Cars & Vans */
public static class Hardware_Part_Number_Xxxxxxx_Cars_Vans {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Hardware_Part_Number_Xxxxxxx_Cars_Vans) 
    private final byte[] _buffer = new byte[+10];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Hardware_Part_Number_Xxxxxxx_Cars_Vans) 
    
     private static int SIZE = 0;
    private static final int Offset$Hardware_Part_Number = SIZE  += 10;
    
    }// tplMakeInitializer(Hardware_Part_Number_Xxxxxxx_Cars_Vans) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 10;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Hardware_Part_Number_Xxxxxxx_Cars_Vans other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Hardware_Part_Number = new  byte[10];
--content--
  public Hardware_Part_Number_Xxxxxxx_Cars_Vans( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Software Part Numbers - Xxxxxxx Cars & Vans */
public static class Software_Part_Numbers_Xxxxxxx_Cars_Vans {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Software_Part_Numbers_Xxxxxxx_Cars_Vans) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Software_Part_Numbers_Xxxxxxx_Cars_Vans) 
    
     private static int SIZE = 0;
    private static final int Offset$Software_Logical_Block_Numbers = SIZE  += ;
    
    }// tplMakeInitializer(Software_Part_Numbers_Xxxxxxx_Cars_Vans) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Software_Part_Numbers_Xxxxxxx_Cars_Vans other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Software_Logical_Block_Numbers = new  byte[];
--content--
  public Software_Part_Numbers_Xxxxxxx_Cars_Vans( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Hardware Version Information */
public static class Hardware_Version_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Hardware_Version_Information) 
    private final byte[] _buffer = new byte[+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Hardware_Version_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$HW_year = SIZE  += 255;
    private static final int Offset$HW_week = SIZE  += 255;
    private static final int Offset$HW_patch_level = SIZE  += 255;
    
    }// tplMakeInitializer(Hardware_Version_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Hardware_Version_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] HW_year = new  byte[255];
 DO  final byte[] HW_week = new  byte[255];
 DO  final byte[] HW_patch_level = new  byte[255];
--content--
  public Hardware_Version_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Software Version Information */
public static class Software_Version_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Software_Version_Information) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Software_Version_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Software_Logical_Block_Version_Information = SIZE  += ;
    
    }// tplMakeInitializer(Software_Version_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Software_Version_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Software_Logical_Block_Version_Information = new  byte[];
--content--
  public Software_Version_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Hardware Supplier Identification */
public static class Hardware_Supplier_Identification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Hardware_Supplier_Identification) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Hardware_Supplier_Identification) 
    
     private static int SIZE = 0;
    private static final int Offset$Hardware_Supplier_Identification = SIZE  += 1;
    
    }// tplMakeInitializer(Hardware_Supplier_Identification) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Hardware_Supplier_Identification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Hardware_Supplier_Identification = new  byte[1];
--content--
  public Hardware_Supplier_Identification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Boot Software Version Information */
public static class Boot_Software_Version_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Boot_Software_Version_Information) 
    private final byte[] _buffer = new byte[+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Boot_Software_Version_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Boot_SW_year = SIZE  += 255;
    private static final int Offset$Boot_SW_week = SIZE  += 255;
    private static final int Offset$Boot_SW_patch_level = SIZE  += 255;
    
    }// tplMakeInitializer(Boot_Software_Version_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Boot_Software_Version_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Boot_SW_year = new  byte[255];
 DO  final byte[] Boot_SW_week = new  byte[255];
 DO  final byte[] Boot_SW_patch_level = new  byte[255];
--content--
  public Boot_Software_Version_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Software Supplier Identification */
public static class Software_Supplier_Identification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Software_Supplier_Identification) 
    private final byte[] _buffer = new byte[+254];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Software_Supplier_Identification) 
    
     private static int SIZE = 0;
    private static final int Offset$Software_Logical_Block_Supplier_Identification = SIZE  += 254;
    
    }// tplMakeInitializer(Software_Supplier_Identification) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 254;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Software_Supplier_Identification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Software_Logical_Block_Supplier_Identification = new  byte[254];
--content--
  public Software_Supplier_Identification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Read Software Fingerprint(s) */
public static class Read_Software_Fingerprint_s {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Read_Software_Fingerprint_s) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Read_Software_Fingerprint_s) 
    
     private static int SIZE = 0;
    private static final int Offset$Software_Fingerprint_s = SIZE  += ;
    
    }// tplMakeInitializer(Read_Software_Fingerprint_s) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Read_Software_Fingerprint_s other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Software_Fingerprint_s = new  byte[];
--content--
  public Read_Software_Fingerprint_s( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECUSerialNumberDataIdentifier */
public static class ECUSerialNumberDataIdentifier {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECUSerialNumberDataIdentifier) 
    private final byte[] _buffer = new byte[+33];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECUSerialNumberDataIdentifier) 
    
     private static int SIZE = 0;
    private static final int Offset$ECU_Serial_Number = SIZE  += 33;
    
    }// tplMakeInitializer(ECUSerialNumberDataIdentifier) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 33;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECUSerialNumberDataIdentifier other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ECU_Serial_Number = new  byte[33];
--content--
  public ECUSerialNumberDataIdentifier( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** VINDataIdentifier */
public static class VINDataIdentifier {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(VINDataIdentifier) 
    private final byte[] _buffer = new byte[+17];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(VINDataIdentifier) 
    
     private static int SIZE = 0;
    private static final int Offset$VINDataIdentifier = SIZE  += 17;
    
    }// tplMakeInitializer(VINDataIdentifier) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 17;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( VINDataIdentifier other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] VINDataIdentifier = new  byte[17];
--content--
  public VINDataIdentifier( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** exhaustRegulationOrTypeApprovalNumber-DataIdentifier (EROTAN) */
public static class exhaustRegulationOrTypeApprovalNumber_DataIdentifier_EROTAN {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(exhaustRegulationOrTypeApprovalNumber_DataIdentifier_EROTAN) 
    private final byte[] _buffer = new byte[+6];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(exhaustRegulationOrTypeApprovalNumber_DataIdentifier_EROTAN) 
    
     private static int SIZE = 0;
    private static final int Offset$EROTAN = SIZE  += 6;
    
    }// tplMakeInitializer(exhaustRegulationOrTypeApprovalNumber_DataIdentifier_EROTAN) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 6;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( exhaustRegulationOrTypeApprovalNumber_DataIdentifier_EROTAN other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] EROTAN = new  byte[6];
--content--
  public exhaustRegulationOrTypeApprovalNumber_DataIdentifier_EROTAN( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Calibration Identifications (CAL ID) */
public static class Calibration_Identifications_CAL_ID {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Calibration_Identifications_CAL_ID) 
    private final byte[] _buffer = new byte[+1+320];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Calibration_Identifications_CAL_ID) 
    
     private static int SIZE = 0;
    private static final int Offset$Number_of_data_items = SIZE  += 1;
    private static final int Offset$Calibration_Identification = SIZE  += 320;
    
    }// tplMakeInitializer(Calibration_Identifications_CAL_ID) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 320;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Calibration_Identifications_CAL_ID other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Number_of_data_items = new  byte[1];
 DO  final byte[] Calibration_Identification = new  byte[320];
--content--
  public Calibration_Identifications_CAL_ID( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Calibration Verification Numbers (CVN) */
public static class Calibration_Verification_Numbers_CVN {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Calibration_Verification_Numbers_CVN) 
    private final byte[] _buffer = new byte[+1+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Calibration_Verification_Numbers_CVN) 
    
     private static int SIZE = 0;
    private static final int Offset$Message_Count_Calibration_Verfication_Number_Number_of_supported = SIZE  += 1;
    private static final int Offset$CVN = SIZE  += ;
    
    }// tplMakeInitializer(Calibration_Verification_Numbers_CVN) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Calibration_Verification_Numbers_CVN other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Message_Count_Calibration_Verfication_Number_Number_of_supported = new  byte[1];
 DO  final byte[] CVN = new  byte[];
--content--
  public Calibration_Verification_Numbers_CVN( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Security Event Log */
public static class Security_Event_Log {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Security_Event_Log) 
    private final byte[] _buffer = new byte[+4092];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Security_Event_Log) 
    
     private static int SIZE = 0;
    private static final int Offset$Security_Event_Log = SIZE  += 4092;
    
    }// tplMakeInitializer(Security_Event_Log) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4092;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Security_Event_Log other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Security_Event_Log = new  byte[4092];
--content--
  public Security_Event_Log( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Write Software Fingerprint */
public static class Write_Software_Fingerprint {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Write_Software_Fingerprint) 
    private final byte[] _buffer = new byte[+16+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Write_Software_Fingerprint) 
    
     private static int SIZE = 0;
    private static final int Offset$ProgrammingUserID = SIZE  += 16;
    private static final int Offset$SW_Programming_year = SIZE  += 255;
    private static final int Offset$SW_Programming_month = SIZE  += 255;
    private static final int Offset$SW_Programming_day = SIZE  += 255;
    
    }// tplMakeInitializer(Write_Software_Fingerprint) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Write_Software_Fingerprint other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ProgrammingUserID = new  byte[16];
 DO  final byte[] SW_Programming_year = new  byte[255];
 DO  final byte[] SW_Programming_month = new  byte[255];
 DO  final byte[] SW_Programming_day = new  byte[255];
--content--
  public Write_Software_Fingerprint( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Diagnostic Authentication Certificate Identification */
public static class Diagnostic_Authentication_Certificate_Identification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Diagnostic_Authentication_Certificate_Identification) 
    private final byte[] _buffer = new byte[+15+16];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Diagnostic_Authentication_Certificate_Identification) 
    
     private static int SIZE = 0;
    private static final int Offset$Diagnostic_Authentication_Certificate_Issuer = SIZE  += 15;
    private static final int Offset$Diagnostic_Authentication_Certificate_Serial_Number = SIZE  += 16;
    
    }// tplMakeInitializer(Diagnostic_Authentication_Certificate_Identification) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 16;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Diagnostic_Authentication_Certificate_Identification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Diagnostic_Authentication_Certificate_Issuer = new  byte[15];
 DO  final byte[] Diagnostic_Authentication_Certificate_Serial_Number = new  byte[16];
--content--
  public Diagnostic_Authentication_Certificate_Identification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Backend CA Certificate Identification */
public static class Backend_CA_Certificate_Identification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Backend_CA_Certificate_Identification) 
    private final byte[] _buffer = new byte[+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Backend_CA_Certificate_Identification) 
    
     private static int SIZE = 0;
    private static final int Offset$Backend_CA_SubjectKeyIdentifier = SIZE  += 20;
    
    }// tplMakeInitializer(Backend_CA_Certificate_Identification) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Backend_CA_Certificate_Identification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Backend_CA_SubjectKeyIdentifier = new  byte[20];
--content--
  public Backend_CA_Certificate_Identification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Root CA Certificate */
public static class Root_CA_Certificate {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Root_CA_Certificate) 
    private final byte[] _buffer = new byte[+1000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Root_CA_Certificate) 
    
     private static int SIZE = 0;
    private static final int Offset$Root_CA_Certificate = SIZE  += 1000;
    
    }// tplMakeInitializer(Root_CA_Certificate) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Root_CA_Certificate other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Root_CA_Certificate = new  byte[1000];
--content--
  public Root_CA_Certificate( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Backend CA Certificate */
public static class Backend_CA_Certificate {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Backend_CA_Certificate) 
    private final byte[] _buffer = new byte[+1000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Backend_CA_Certificate) 
    
     private static int SIZE = 0;
    private static final int Offset$Backend_CA_Certificate = SIZE  += 1000;
    
    }// tplMakeInitializer(Backend_CA_Certificate) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Backend_CA_Certificate other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Backend_CA_Certificate = new  byte[1000];
--content--
  public Backend_CA_Certificate( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECU Certificate */
public static class ECU_Certificate {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECU_Certificate) 
    private final byte[] _buffer = new byte[+32+32+64+1000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECU_Certificate) 
    
     private static int SIZE = 0;
    private static final int Offset$Nonce = SIZE  += 32;
    private static final int Offset$Ephemeral_ECU_Public_Key = SIZE  += 32;
    private static final int Offset$Data_Signature = SIZE  += 64;
    private static final int Offset$ECU_Certificate = SIZE  += 1000;
    
    }// tplMakeInitializer(ECU_Certificate) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 32;
      
        // Empty.
        currentOffset += 32;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 1000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECU_Certificate other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Nonce = new  byte[32];
 DO  final byte[] Ephemeral_ECU_Public_Key = new  byte[32];
 DO  final byte[] Data_Signature = new  byte[64];
 DO  final byte[] ECU_Certificate = new  byte[1000];
--content--
  public ECU_Certificate( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SecOC PDU Data-IDs and Key Checksum */
public static class SecOC_PDU_Data_IDs_and_Key_Checksum {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SecOC_PDU_Data_IDs_and_Key_Checksum) 
    private final byte[] _buffer = new byte[+4092];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SecOC_PDU_Data_IDs_and_Key_Checksum) 
    
     private static int SIZE = 0;
    private static final int Offset$Secured_PDU_Data_IDs_and_Key_Checksum = SIZE  += 4092;
    
    }// tplMakeInitializer(SecOC_PDU_Data_IDs_and_Key_Checksum) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4092;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SecOC_PDU_Data_IDs_and_Key_Checksum other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Secured_PDU_Data_IDs_and_Key_Checksum = new  byte[4092];
--content--
  public SecOC_PDU_Data_IDs_and_Key_Checksum( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SecOC Vehicle Shared Secret Hash */
public static class SecOC_Vehicle_Shared_Secret_Hash {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SecOC_Vehicle_Shared_Secret_Hash) 
    private final byte[] _buffer = new byte[+4];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SecOC_Vehicle_Shared_Secret_Hash) 
    
     private static int SIZE = 0;
    private static final int Offset$SecOC_Vehicle_Shared_Secret_Hash = SIZE  += 4;
    
    }// tplMakeInitializer(SecOC_Vehicle_Shared_Secret_Hash) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SecOC_Vehicle_Shared_Secret_Hash other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SecOC_Vehicle_Shared_Secret_Hash = new  byte[4];
--content--
  public SecOC_Vehicle_Shared_Secret_Hash( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Access Control List Version */
public static class Access_Control_List_Version {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Access_Control_List_Version) 
    private final byte[] _buffer = new byte[+15+1+1+1+64+15+1+1+1+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Access_Control_List_Version) 
    
     private static int SIZE = 0;
    private static final int Offset$Basic_ACL_Version_Generation_Time_GTC = SIZE  += 15;
    private static final int Offset$Basic_ACL_Version_Candela_File_Version_Major = SIZE  += 1;
    private static final int Offset$Basic_ACL_Version_Candela_File_Version_Minor = SIZE  += 1;
    private static final int Offset$Basic_ACL_Version_Candela_File_Version_Patch = SIZE  += 1;
    private static final int Offset$Basic_ACL_Hash = SIZE  += 64;
    private static final int Offset$ECU_indvidual_ACL_Version_Generation_Time_GTC = SIZE  += 15;
    private static final int Offset$ECU_indvidual_ACL_Version_Candela_File_Version_Major = SIZE  += 1;
    private static final int Offset$ECU_indvidual_ACL_Version_Candela_File_Version_Minor = SIZE  += 1;
    private static final int Offset$ECU_indvidual_ACL_Version_Candela_File_Version_Patch = SIZE  += 1;
    private static final int Offset$ECU_indvidual_ACL_Hash = SIZE  += 64;
    
    }// tplMakeInitializer(Access_Control_List_Version) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Access_Control_List_Version other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Basic_ACL_Version_Generation_Time_GTC = new  byte[15];
 DO  final byte[] Basic_ACL_Version_Candela_File_Version_Major = new  byte[1];
 DO  final byte[] Basic_ACL_Version_Candela_File_Version_Minor = new  byte[1];
 DO  final byte[] Basic_ACL_Version_Candela_File_Version_Patch = new  byte[1];
 DO  final byte[] Basic_ACL_Hash = new  byte[64];
 DO  final byte[] ECU_indvidual_ACL_Version_Generation_Time_GTC = new  byte[15];
 DO  final byte[] ECU_indvidual_ACL_Version_Candela_File_Version_Major = new  byte[1];
 DO  final byte[] ECU_indvidual_ACL_Version_Candela_File_Version_Minor = new  byte[1];
 DO  final byte[] ECU_indvidual_ACL_Version_Candela_File_Version_Patch = new  byte[1];
 DO  final byte[] ECU_indvidual_ACL_Hash = new  byte[64];
--content--
  public Access_Control_List_Version( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Secured System Date and Time */
public static class Secured_System_Date_and_Time {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Secured_System_Date_and_Time) 
    private final byte[] _buffer = new byte[+15];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Secured_System_Date_and_Time) 
    
     private static int SIZE = 0;
    private static final int Offset$GeneralizedTime = SIZE  += 15;
    
    }// tplMakeInitializer(Secured_System_Date_and_Time) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 15;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Secured_System_Date_and_Time other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] GeneralizedTime = new  byte[15];
--content--
  public Secured_System_Date_and_Time( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Global Time Sync Measured Values */
public static class Global_Time_Sync_Measured_Values {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Global_Time_Sync_Measured_Values) 
    private final byte[] _buffer = new byte[+1+200];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Global_Time_Sync_Measured_Values) 
    
     private static int SIZE = 0;
    private static final int Offset$Source_Domain_Information_for_Interpretation = SIZE  += 1;
    private static final int Offset$Global_Time_Sync_Measured_Values = SIZE  += 200;
    
    }// tplMakeInitializer(Global_Time_Sync_Measured_Values) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 200;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Global_Time_Sync_Measured_Values other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Source_Domain_Information_for_Interpretation = new  byte[1];
 DO  final byte[] Global_Time_Sync_Measured_Values = new  byte[200];
--content--
  public Global_Time_Sync_Measured_Values( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SSA Version Information */
public static class SSA_Version_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SSA_Version_Information) 
    private final byte[] _buffer = new byte[+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SSA_Version_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$SSA_Major_Version = SIZE  += 1;
    private static final int Offset$SSA_Minor_Version = SIZE  += 1;
    private static final int Offset$SSA_Patch_Level = SIZE  += 1;
    
    }// tplMakeInitializer(SSA_Version_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SSA_Version_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SSA_Major_Version = new  byte[1];
 DO  final byte[] SSA_Minor_Version = new  byte[1];
 DO  final byte[] SSA_Patch_Level = new  byte[1];
--content--
  public SSA_Version_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECU Logging Data */
public static class ECU_Logging_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECU_Logging_Data) 
    private final byte[] _buffer = new byte[+30+15+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECU_Logging_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$Description = SIZE  += 30;
    private static final int Offset$ECU_Name = SIZE  += 15;
    private static final int Offset$MessageID = SIZE  += 1;
    private static final int Offset$Time_stamp = SIZE  += 1;
    private static final int Offset$Trigger = SIZE  += 1;
    private static final int Offset$Payload = SIZE  += 1;
    
    }// tplMakeInitializer(ECU_Logging_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 30;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECU_Logging_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Description = new  byte[30];
 DO  final byte[] ECU_Name = new  byte[15];
 DO  final byte[] MessageID = new  byte[1];
 DO  final byte[] Time_stamp = new  byte[1];
 DO  final byte[] Trigger = new  byte[1];
 DO  final byte[] Payload = new  byte[1];
--content--
  public ECU_Logging_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Security Event Log Current Counter Values */
public static class Security_Event_Log_Current_Counter_Values {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Security_Event_Log_Current_Counter_Values) 
    private final byte[] _buffer = new byte[+4095];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Security_Event_Log_Current_Counter_Values) 
    
     private static int SIZE = 0;
    private static final int Offset$Security_Event_Log_Current_Counter_Values = SIZE  += 4095;
    
    }// tplMakeInitializer(Security_Event_Log_Current_Counter_Values) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4095;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Security_Event_Log_Current_Counter_Values other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Security_Event_Log_Current_Counter_Values = new  byte[4095];
--content--
  public Security_Event_Log_Current_Counter_Values( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Ethernet ENV Data */
public static class Ethernet_ENV_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Ethernet_ENV_Data) 
    private final byte[] _buffer = new byte[+6];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Ethernet_ENV_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$Link_Failure = SIZE  += 6;
    
    }// tplMakeInitializer(Ethernet_ENV_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 6;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Ethernet_ENV_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Link_Failure = new  byte[6];
--content--
  public Ethernet_ENV_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SecOc ENV Data */
public static class SecOc_ENV_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SecOc_ENV_Data) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SecOc_ENV_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$SecOcDataID = SIZE  += 1;
    
    }// tplMakeInitializer(SecOc_ENV_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SecOc_ENV_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SecOcDataID = new  byte[1];
--content--
  public SecOc_ENV_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SecOC Local TickCount */
public static class SecOC_Local_TickCount {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SecOC_Local_TickCount) 
    private final byte[] _buffer = new byte[+6];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SecOC_Local_TickCount) 
    
     private static int SIZE = 0;
    private static final int Offset$TickCount = SIZE  += 6;
    
    }// tplMakeInitializer(SecOC_Local_TickCount) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 6;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SecOC_Local_TickCount other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] TickCount = new  byte[6];
--content--
  public SecOC_Local_TickCount( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** IP_Addresses ipv4 Only */
public static class IP_Addresses_ipv4_Only {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(IP_Addresses_ipv4_Only) 
    private final byte[] _buffer = new byte[+15+15+15+15];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(IP_Addresses_ipv4_Only) 
    
     private static int SIZE = 0;
    private static final int Offset$IPv4_Address_IMSApn = SIZE  += 15;
    private static final int Offset$IPv4_Address_HOSApn = SIZE  += 15;
    private static final int Offset$IPv4_Address_B2BApn = SIZE  += 15;
    private static final int Offset$IPv4_Address_B2CApn = SIZE  += 15;
    
    }// tplMakeInitializer(IP_Addresses_ipv4_Only) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( IP_Addresses_ipv4_Only other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] IPv4_Address_IMSApn = new  byte[15];
 DO  final byte[] IPv4_Address_HOSApn = new  byte[15];
 DO  final byte[] IPv4_Address_B2BApn = new  byte[15];
 DO  final byte[] IPv4_Address_B2CApn = new  byte[15];
--content--
  public IP_Addresses_ipv4_Only( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Visible_Neighbor_Cell_Stations */
public static class Cellular_Network_Visible_Neighbor_Cell_Stations {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Visible_Neighbor_Cell_Stations) 
    private final byte[] _buffer = new byte[+20+20+20+20+20+20+20+20+20+20+20+20+20+20+20+20+20+20+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Visible_Neighbor_Cell_Stations) 
    
     private static int SIZE = 0;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_1 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_2 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_3 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_4 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_5 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_6 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_7 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_8 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_9 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_10 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_11 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_12 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_13 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_14 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_15 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_16 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_17 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_18 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_19 = SIZE  += 20;
    private static final int Offset$Operator_Name_Neihgbor_Cell_Station_Nr_20 = SIZE  += 20;
    
    }// tplMakeInitializer(Cellular_Network_Visible_Neighbor_Cell_Stations) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Visible_Neighbor_Cell_Stations other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_1 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_2 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_3 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_4 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_5 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_6 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_7 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_8 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_9 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_10 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_11 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_12 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_13 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_14 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_15 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_16 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_17 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_18 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_19 = new  byte[20];
 DO  final byte[] Operator_Name_Neihgbor_Cell_Station_Nr_20 = new  byte[20];
--content--
  public Cellular_Network_Visible_Neighbor_Cell_Stations( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Home_Provider_Name */
public static class Cellular_Network_Home_Provider_Name {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Home_Provider_Name) 
    private final byte[] _buffer = new byte[+32];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Home_Provider_Name) 
    
     private static int SIZE = 0;
    private static final int Offset$Name = SIZE  += 32;
    
    }// tplMakeInitializer(Cellular_Network_Home_Provider_Name) 
    
    {
        int currentOffset = 0;
        copyTo( 85,78,75,79,87,78 );
        currentOffset += 32;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Home_Provider_Name other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Name = new  byte[32];
--content--
  public Cellular_Network_Home_Provider_Name( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Current_Provider_Name */
public static class Cellular_Network_Current_Provider_Name {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Current_Provider_Name) 
    private final byte[] _buffer = new byte[+32];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Current_Provider_Name) 
    
     private static int SIZE = 0;
    private static final int Offset$Name = SIZE  += 32;
    
    }// tplMakeInitializer(Cellular_Network_Current_Provider_Name) 
    
    {
        int currentOffset = 0;
        copyTo( 85,78,75,79,87,78 );
        currentOffset += 32;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Current_Provider_Name other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Name = new  byte[32];
--content--
  public Cellular_Network_Current_Provider_Name( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** GNSS_Position_Data */
public static class GNSS_Position_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(GNSS_Position_Data) 
    private final byte[] _buffer = new byte[+1+255+255+255+1+255+255+255+1+255+255+255+1+255+255+255+1+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(GNSS_Position_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$GPS_Latitude_Direction = SIZE  += 1;
    private static final int Offset$GPS_Latitude_Degrees = SIZE  += 255;
    private static final int Offset$GPS_Latitude_Minutes = SIZE  += 255;
    private static final int Offset$GPS_Latitude_Seconds = SIZE  += 255;
    private static final int Offset$GPS_Longitude_Direction = SIZE  += 1;
    private static final int Offset$GPS_Longitude_Degrees = SIZE  += 255;
    private static final int Offset$GPS_Longitude_Minutes = SIZE  += 255;
    private static final int Offset$GPS_Longitude_Seconds = SIZE  += 255;
    private static final int Offset$GPS_Fix = SIZE  += 1;
    private static final int Offset$GPS_Velocity = SIZE  += 255;
    private static final int Offset$GPS_Heading = SIZE  += 255;
    private static final int Offset$GPS_Altitude = SIZE  += 255;
    private static final int Offset$DR_Latitude_Direction = SIZE  += 1;
    private static final int Offset$DR_Latitude_Degrees = SIZE  += 255;
    private static final int Offset$DR_Latitude_Minutes = SIZE  += 255;
    private static final int Offset$DR_Latitude_Seconds = SIZE  += 255;
    private static final int Offset$DR_Longitude_Direction = SIZE  += 1;
    private static final int Offset$DR_Longitude_Degrees = SIZE  += 255;
    private static final int Offset$DR_Longitude_Minutes = SIZE  += 255;
    private static final int Offset$DR_Longitude_Seconds = SIZE  += 255;
    
    }// tplMakeInitializer(GNSS_Position_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( GNSS_Position_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] GPS_Latitude_Direction = new  byte[1];
 DO  final byte[] GPS_Latitude_Degrees = new  byte[255];
 DO  final byte[] GPS_Latitude_Minutes = new  byte[255];
 DO  final byte[] GPS_Latitude_Seconds = new  byte[255];
 DO  final byte[] GPS_Longitude_Direction = new  byte[1];
 DO  final byte[] GPS_Longitude_Degrees = new  byte[255];
 DO  final byte[] GPS_Longitude_Minutes = new  byte[255];
 DO  final byte[] GPS_Longitude_Seconds = new  byte[255];
 DO  final byte[] GPS_Fix = new  byte[1];
 DO  final byte[] GPS_Velocity = new  byte[255];
 DO  final byte[] GPS_Heading = new  byte[255];
 DO  final byte[] GPS_Altitude = new  byte[255];
 DO  final byte[] DR_Latitude_Direction = new  byte[1];
 DO  final byte[] DR_Latitude_Degrees = new  byte[255];
 DO  final byte[] DR_Latitude_Minutes = new  byte[255];
 DO  final byte[] DR_Latitude_Seconds = new  byte[255];
 DO  final byte[] DR_Longitude_Direction = new  byte[1];
 DO  final byte[] DR_Longitude_Degrees = new  byte[255];
 DO  final byte[] DR_Longitude_Minutes = new  byte[255];
 DO  final byte[] DR_Longitude_Seconds = new  byte[255];
--content--
  public GNSS_Position_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SIM_Profile */
public static class SIM_Profile {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SIM_Profile) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SIM_Profile) 
    
     private static int SIZE = 0;
    private static final int Offset$Active_Profile = SIZE  += 1;
    
    }// tplMakeInitializer(SIM_Profile) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SIM_Profile other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Active_Profile = new  byte[1];
--content--
  public SIM_Profile( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Signal_Information */
public static class Cellular_Network_Signal_Information {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Signal_Information) 
    private final byte[] _buffer = new byte[+255+255+20+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Signal_Information) 
    
     private static int SIZE = 0;
    private static final int Offset$Received_Signal_Strength_rssi_dBm = SIZE  += 255;
    private static final int Offset$Signal_in_Bars_HU_HMI = SIZE  += 255;
    private static final int Offset$Registered_Operator_Name = SIZE  += 20;
    private static final int Offset$Roaming_Status = SIZE  += 1;
    private static final int Offset$Connection_Type = SIZE  += 1;
    
    }// tplMakeInitializer(Cellular_Network_Signal_Information) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Signal_Information other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Received_Signal_Strength_rssi_dBm = new  byte[255];
 DO  final byte[] Signal_in_Bars_HU_HMI = new  byte[255];
 DO  final byte[] Registered_Operator_Name = new  byte[20];
 DO  final byte[] Roaming_Status = new  byte[1];
 DO  final byte[] Connection_Type = new  byte[1];
--content--
  public Cellular_Network_Signal_Information( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Output */
public static class TCU_Output {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Output) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Output) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(TCU_Output) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Output other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public TCU_Output( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Inputs */
public static class TCU_Inputs {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Inputs) 
    private final byte[] _buffer = new byte[+255+255+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Inputs) 
    
     private static int SIZE = 0;
    private static final int Offset$Odometer = SIZE  += 255;
    private static final int Offset$Battery_Voltage = SIZE  += 255;
    private static final int Offset$Wheel_Pulse_Counter_rear_left_96_per_rotation = SIZE  += 255;
    private static final int Offset$Wheel_Pulse_Counter_rear_right_96_per_rotation = SIZE  += 255;
    private static final int Offset$Vehicle_Yaw_Rate_Unfiltered = SIZE  += 255;
    
    }// tplMakeInitializer(TCU_Inputs) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Inputs other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Odometer = new  byte[255];
 DO  final byte[] Battery_Voltage = new  byte[255];
 DO  final byte[] Wheel_Pulse_Counter_rear_left_96_per_rotation = new  byte[255];
 DO  final byte[] Wheel_Pulse_Counter_rear_right_96_per_rotation = new  byte[255];
 DO  final byte[] Vehicle_Yaw_Rate_Unfiltered = new  byte[255];
--content--
  public TCU_Inputs( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Certificate_Status */
public static class Certificate_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Certificate_Status) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Certificate_Status) 
    
     private static int SIZE = 0;
    private static final int Offset$Certificate_Status = SIZE  += 1;
    
    }// tplMakeInitializer(Certificate_Status) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Certificate_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Certificate_Status = new  byte[1];
--content--
  public Certificate_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Registration_Status */
public static class Registration_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Registration_Status) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Registration_Status) 
    
     private static int SIZE = 0;
    private static final int Offset$Registration_Error_Status = SIZE  += 1;
    private static final int Offset$Registration_Active = SIZE  += 1;
    
    }// tplMakeInitializer(Registration_Status) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Registration_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Registration_Error_Status = new  byte[1];
 DO  final byte[] Registration_Active = new  byte[1];
--content--
  public Registration_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ComStck Msg Queues Config */
public static class ComStck_Msg_Queues_Config {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ComStck_Msg_Queues_Config) 
    private final byte[] _buffer = new byte[+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ComStck_Msg_Queues_Config) 
    
     private static int SIZE = 0;
    private static final int Offset$Message_Queue_Weight_High = SIZE  += 255;
    private static final int Offset$Message_Queue_Weight_Mid = SIZE  += 255;
    private static final int Offset$Message_Queue_Weight_Low = SIZE  += 255;
    
    }// tplMakeInitializer(ComStck_Msg_Queues_Config) 
    
    {
        int currentOffset = 0;
        copyTo( 4 );
        currentOffset += 255;
      
        copyTo( 2 );
        currentOffset += 255;
      
        copyTo( 1 );
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ComStck_Msg_Queues_Config other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Message_Queue_Weight_High = new  byte[255];
 DO  final byte[] Message_Queue_Weight_Mid = new  byte[255];
 DO  final byte[] Message_Queue_Weight_Low = new  byte[255];
--content--
  public ComStck_Msg_Queues_Config( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** APN_User_and_Password */
public static class APN_User_and_Password {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(APN_User_and_Password) 
    private final byte[] _buffer = new byte[+15+15+15+15+15+15+15+15];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(APN_User_and_Password) 
    
     private static int SIZE = 0;
    private static final int Offset$internetApnUsername = SIZE  += 15;
    private static final int Offset$internetApnPassword = SIZE  += 15;
    private static final int Offset$imsApnUsername = SIZE  += 15;
    private static final int Offset$imsApnPassword = SIZE  += 15;
    private static final int Offset$adminApnUsername = SIZE  += 15;
    private static final int Offset$adminApnPassword = SIZE  += 15;
    private static final int Offset$enterpriseApnUsername = SIZE  += 15;
    private static final int Offset$enterpriseApnPassword = SIZE  += 15;
    
    }// tplMakeInitializer(APN_User_and_Password) 
    
    {
        int currentOffset = 0;
        copyTo( 117,115,101,114,110,97,109,101,65,66,67,88,89,90,49 );
        currentOffset += 15;
      
        copyTo( 112,97,115,115,119,111,114,100,65,66,67,88,89,90,49 );
        currentOffset += 15;
      
        copyTo( 117,115,101,114,110,97,109,101,65,66,67,88,89,90,50 );
        currentOffset += 15;
      
        copyTo( 112,97,115,115,119,111,114,100,65,66,67,88,89,90,50 );
        currentOffset += 15;
      
        copyTo( 117,115,101,114,110,97,109,101,65,66,67,88,89,90,51 );
        currentOffset += 15;
      
        copyTo( 112,97,115,115,119,111,114,100,65,66,67,88,89,90,51 );
        currentOffset += 15;
      
        copyTo( 117,115,101,114,110,97,109,101,65,66,67,88,89,90,52 );
        currentOffset += 15;
      
        copyTo( 112,97,115,115,119,111,114,100,65,66,67,88,89,90,52 );
        currentOffset += 15;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( APN_User_and_Password other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] internetApnUsername = new  byte[15];
 DO  final byte[] internetApnPassword = new  byte[15];
 DO  final byte[] imsApnUsername = new  byte[15];
 DO  final byte[] imsApnPassword = new  byte[15];
 DO  final byte[] adminApnUsername = new  byte[15];
 DO  final byte[] adminApnPassword = new  byte[15];
 DO  final byte[] enterpriseApnUsername = new  byte[15];
 DO  final byte[] enterpriseApnPassword = new  byte[15];
--content--
  public APN_User_and_Password( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Version_Diagnostic_Specification */
public static class Version_Diagnostic_Specification {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Version_Diagnostic_Specification) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Version_Diagnostic_Specification) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Version_Diagnostic_Specification) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Version_Diagnostic_Specification other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Version_Diagnostic_Specification( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Set_Time_Epoch */
public static class Set_Time_Epoch {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Set_Time_Epoch) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Set_Time_Epoch) 
    
     private static int SIZE = 0;
    private static final int Offset$gnssTimeEpoch = SIZE  += 1;
    
    }// tplMakeInitializer(Set_Time_Epoch) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Set_Time_Epoch other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] gnssTimeEpoch = new  byte[1];
--content--
  public Set_Time_Epoch( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Service_Provisioning_Authorization_State */
public static class Service_Provisioning_Authorization_State {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Service_Provisioning_Authorization_State) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Service_Provisioning_Authorization_State) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Service_Provisioning_Authorization_State) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Service_Provisioning_Authorization_State other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Service_Provisioning_Authorization_State( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Set_Reconciliation_Timer */
public static class Set_Reconciliation_Timer {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Set_Reconciliation_Timer) 
    private final byte[] _buffer = new byte[+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Set_Reconciliation_Timer) 
    
     private static int SIZE = 0;
    private static final int Offset$reconciliationTimer = SIZE  += 255;
    
    }// tplMakeInitializer(Set_Reconciliation_Timer) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Set_Reconciliation_Timer other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] reconciliationTimer = new  byte[255];
--content--
  public Set_Reconciliation_Timer( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Read_Time_of_Last_Reconcilliation */
public static class Read_Time_of_Last_Reconcilliation {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Read_Time_of_Last_Reconcilliation) 
    private final byte[] _buffer = new byte[+255+1+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Read_Time_of_Last_Reconcilliation) 
    
     private static int SIZE = 0;
    private static final int Offset$Date_of_Last_Reconciliation_year = SIZE  += 255;
    private static final int Offset$Date_of_Last_Reconciliation_month = SIZE  += 1;
    private static final int Offset$Date_of_Last_Reconciliation_day = SIZE  += 255;
    private static final int Offset$Date_of_Last_Reconciliation_hour = SIZE  += 255;
    private static final int Offset$Date_of_Last_Reconciliation_minute = SIZE  += 255;
    
    }// tplMakeInitializer(Read_Time_of_Last_Reconcilliation) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Read_Time_of_Last_Reconcilliation other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Date_of_Last_Reconciliation_year = new  byte[255];
 DO  final byte[] Date_of_Last_Reconciliation_month = new  byte[1];
 DO  final byte[] Date_of_Last_Reconciliation_day = new  byte[255];
 DO  final byte[] Date_of_Last_Reconciliation_hour = new  byte[255];
 DO  final byte[] Date_of_Last_Reconciliation_minute = new  byte[255];
--content--
  public Read_Time_of_Last_Reconcilliation( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Remote_Update_Setting */
public static class Remote_Update_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Remote_Update_Setting) 
    private final byte[] _buffer = new byte[+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Remote_Update_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$maxSwdlMaxIgnitionOffDuration = SIZE  += 255;
    private static final int Offset$swdlActivationDelay = SIZE  += 255;
    
    }// tplMakeInitializer(Remote_Update_Setting) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Remote_Update_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] maxSwdlMaxIgnitionOffDuration = new  byte[255];
 DO  final byte[] swdlActivationDelay = new  byte[255];
--content--
  public Remote_Update_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Power_Mode_Timers */
public static class Power_Mode_Timers {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Power_Mode_Timers) 
    private final byte[] _buffer = new byte[+255+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Power_Mode_Timers) 
    
     private static int SIZE = 0;
    private static final int Offset$lowPowerDuration = SIZE  += 255;
    private static final int Offset$minimumAwakeTimer = SIZE  += 255;
    private static final int Offset$dnoIntendedReset = SIZE  += 255;
    private static final int Offset$R4RWakeupDelayTimer = SIZE  += 255;
    
    }// tplMakeInitializer(Power_Mode_Timers) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        copyTo( 500 );
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Power_Mode_Timers other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] lowPowerDuration = new  byte[255];
 DO  final byte[] minimumAwakeTimer = new  byte[255];
 DO  final byte[] dnoIntendedReset = new  byte[255];
 DO  final byte[] R4RWakeupDelayTimer = new  byte[255];
--content--
  public Power_Mode_Timers( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Operating_Mode */
public static class Operating_Mode {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Operating_Mode) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Operating_Mode) 
    
     private static int SIZE = 0;
    private static final int Offset$Operating_Mode = SIZE  += 1;
    
    }// tplMakeInitializer(Operating_Mode) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Operating_Mode other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Operating_Mode = new  byte[1];
--content--
  public Operating_Mode( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi ID */
public static class Cathi_ID {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_ID) 
    private final byte[] _buffer = new byte[+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_ID) 
    
     private static int SIZE = 0;
    private static final int Offset$Cathi_ID = SIZE  += 255;
    
    }// tplMakeInitializer(Cathi_ID) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_ID other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Cathi_ID = new  byte[255];
--content--
  public Cathi_ID( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Numbers */
public static class Cellular_Network_Numbers {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Numbers) 
    private final byte[] _buffer = new byte[+32+22+16+15+15];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Numbers) 
    
     private static int SIZE = 0;
    private static final int Offset$EUICC = SIZE  += 32;
    private static final int Offset$ICCID = SIZE  += 22;
    private static final int Offset$IMEI_MEID = SIZE  += 16;
    private static final int Offset$IMSI_MIN = SIZE  += 15;
    private static final int Offset$MSISDN_MDN = SIZE  += 15;
    
    }// tplMakeInitializer(Cellular_Network_Numbers) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 32;
      
        // Empty.
        currentOffset += 22;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Numbers other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] EUICC = new  byte[32];
 DO  final byte[] ICCID = new  byte[22];
 DO  final byte[] IMEI_MEID = new  byte[16];
 DO  final byte[] IMSI_MIN = new  byte[15];
 DO  final byte[] MSISDN_MDN = new  byte[15];
--content--
  public Cellular_Network_Numbers( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Antenna_Switch_Status */
public static class Cellular_Antenna_Switch_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Antenna_Switch_Status) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Antenna_Switch_Status) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Cellular_Antenna_Switch_Status) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Antenna_Switch_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Cellular_Antenna_Switch_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Model_Type */
public static class TCU_Model_Type {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Model_Type) 
    private final byte[] _buffer = new byte[+6+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Model_Type) 
    
     private static int SIZE = 0;
    private static final int Offset$TCU_Version = SIZE  += 6;
    private static final int Offset$Market = SIZE  += 1;
    private static final int Offset$HW_Connection_Capability_with_HU = SIZE  += 1;
    
    }// tplMakeInitializer(TCU_Model_Type) 
    
    {
        int currentOffset = 0;
        copyTo( 86,32,48,49,46,48 );
        currentOffset += 6;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Model_Type other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] TCU_Version = new  byte[6];
 DO  final byte[] Market = new  byte[1];
 DO  final byte[] HW_Connection_Capability_with_HU = new  byte[1];
--content--
  public TCU_Model_Type( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RTMATPbaseURL */
public static class RTMATPbaseURL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RTMATPbaseURL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RTMATPbaseURL) 
    
     private static int SIZE = 0;
    private static final int Offset$RTMATPbaseURL = SIZE  += 101;
    
    }// tplMakeInitializer(RTMATPbaseURL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RTMATPbaseURL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RTMATPbaseURL = new  byte[101];
--content--
  public RTMATPbaseURL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** NTP_URL_Pool */
public static class NTP_URL_Pool {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(NTP_URL_Pool) 
    private final byte[] _buffer = new byte[+40+40];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(NTP_URL_Pool) 
    
     private static int SIZE = 0;
    private static final int Offset$ntpUrlMain = SIZE  += 40;
    private static final int Offset$ntpUrlBackup = SIZE  += 40;
    
    }// tplMakeInitializer(NTP_URL_Pool) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 40;
      
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 40;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( NTP_URL_Pool other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ntpUrlMain = new  byte[40];
 DO  final byte[] ntpUrlBackup = new  byte[40];
--content--
  public NTP_URL_Pool( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MTU_Size */
public static class MTU_Size {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MTU_Size) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MTU_Size) 
    
     private static int SIZE = 0;
    private static final int Offset$mtuSize = SIZE  += 1;
    
    }// tplMakeInitializer(MTU_Size) 
    
    {
        int currentOffset = 0;
        copyTo( 1380 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MTU_Size other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] mtuSize = new  byte[1];
--content--
  public MTU_Size( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Internal_SW_Versions */
public static class TCU_Internal_SW_Versions {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Internal_SW_Versions) 
    private final byte[] _buffer = new byte[+20+20+20+16];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Internal_SW_Versions) 
    
     private static int SIZE = 0;
    private static final int Offset$SoC_System = SIZE  += 20;
    private static final int Offset$SoC_Kernel_Version = SIZE  += 20;
    private static final int Offset$VuC_Version = SIZE  += 20;
    private static final int Offset$SoC_Platform_Modem_Version = SIZE  += 16;
    
    }// tplMakeInitializer(TCU_Internal_SW_Versions) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 16;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Internal_SW_Versions other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SoC_System = new  byte[20];
 DO  final byte[] SoC_Kernel_Version = new  byte[20];
 DO  final byte[] VuC_Version = new  byte[20];
 DO  final byte[] SoC_Platform_Modem_Version = new  byte[16];
--content--
  public TCU_Internal_SW_Versions( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** System_Time */
public static class System_Time {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(System_Time) 
    private final byte[] _buffer = new byte[+255+1+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(System_Time) 
    
     private static int SIZE = 0;
    private static final int Offset$System_Time_year = SIZE  += 255;
    private static final int Offset$System_Time_month = SIZE  += 1;
    private static final int Offset$System_Time_day = SIZE  += 255;
    private static final int Offset$System_Time_hour = SIZE  += 255;
    private static final int Offset$System_Time_minute_1 = SIZE  += 255;
    
    }// tplMakeInitializer(System_Time) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( System_Time other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] System_Time_year = new  byte[255];
 DO  final byte[] System_Time_month = new  byte[1];
 DO  final byte[] System_Time_day = new  byte[255];
 DO  final byte[] System_Time_hour = new  byte[255];
 DO  final byte[] System_Time_minute_1 = new  byte[255];
--content--
  public System_Time( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ServiceCall Setting */
public static class ServiceCall_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ServiceCall_Setting) 
    private final byte[] _buffer = new byte[+20+20+20+20+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ServiceCall_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$PrimaryRCall = SIZE  += 20;
    private static final int Offset$PrimaryICall = SIZE  += 20;
    private static final int Offset$SecondaryRCall = SIZE  += 20;
    private static final int Offset$SecondaryICall = SIZE  += 20;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$scallDppConfirmed = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    
    }// tplMakeInitializer(ServiceCall_Setting) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ServiceCall_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] PrimaryRCall = new  byte[20];
 DO  final byte[] PrimaryICall = new  byte[20];
 DO  final byte[] SecondaryRCall = new  byte[20];
 DO  final byte[] SecondaryICall = new  byte[20];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] scallDppConfirmed = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
--content--
  public ServiceCall_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECall Setting */
public static class ECall_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECall_Setting) 
    private final byte[] _buffer = new byte[+20+20+20+20+1+1+1+1+1+1+1+1+1+1+1+1+1+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECall_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$PrimaryAECall = SIZE  += 20;
    private static final int Offset$PrimaryMECall = SIZE  += 20;
    private static final int Offset$SecondaryAECall = SIZE  += 20;
    private static final int Offset$SecondaryMECall = SIZE  += 20;
    private static final int Offset$ECallMuteDuration = SIZE  += 1;
    private static final int Offset$ecallPsapCallingStrategy = SIZE  += 1;
    private static final int Offset$ecallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$ecallSmsTransmission = SIZE  += 1;
    private static final int Offset$ecallInbandDataPush = SIZE  += 1;
    private static final int Offset$ecallDtmfAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallDtmfManualEcall = SIZE  += 1;
    private static final int Offset$ecallDelayTimer = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerManualEcall = SIZE  += 1;
    private static final int Offset$ecallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$eCallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ecallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$EcallTestNumber = SIZE  += 20;
    private static final int Offset$EcallsmsTestDestination = SIZE  += 20;
    
    }// tplMakeInitializer(ECall_Setting) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECall_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] PrimaryAECall = new  byte[20];
 DO  final byte[] PrimaryMECall = new  byte[20];
 DO  final byte[] SecondaryAECall = new  byte[20];
 DO  final byte[] SecondaryMECall = new  byte[20];
 DO  final byte[] ECallMuteDuration = new  byte[1];
 DO  final byte[] ecallPsapCallingStrategy = new  byte[1];
 DO  final byte[] ecallAtpDataTransmission = new  byte[1];
 DO  final byte[] ecallSmsTransmission = new  byte[1];
 DO  final byte[] ecallInbandDataPush = new  byte[1];
 DO  final byte[] ecallDtmfAutomaticEcall = new  byte[1];
 DO  final byte[] ecallDtmfManualEcall = new  byte[1];
 DO  final byte[] ecallDelayTimer = new  byte[1];
 DO  final byte[] ecallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ecallKeyLockTimerManualEcall = new  byte[1];
 DO  final byte[] ecallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] eCallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ecallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] EcallTestNumber = new  byte[20];
 DO  final byte[] EcallsmsTestDestination = new  byte[20];
--content--
  public ECall_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Voice_Call_Execution_Settings */
public static class Voice_Call_Execution_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Voice_Call_Execution_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Voice_Call_Execution_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$voiceCallMuteDuration = SIZE  += 1;
    private static final int Offset$ecallPsapCallingStrategy = SIZE  += 1;
    private static final int Offset$ecallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$ecallSmsTransmission = SIZE  += 1;
    private static final int Offset$ecallInbandDataPush = SIZE  += 1;
    private static final int Offset$ecallDtmfAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallDtmfManualEcall = SIZE  += 1;
    private static final int Offset$ecallDelayTimer = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerManualEcall = SIZE  += 1;
    private static final int Offset$ecallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$eCallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ecallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$scallDppConfirmed = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    
    }// tplMakeInitializer(Voice_Call_Execution_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Voice_Call_Execution_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] voiceCallMuteDuration = new  byte[1];
 DO  final byte[] ecallPsapCallingStrategy = new  byte[1];
 DO  final byte[] ecallAtpDataTransmission = new  byte[1];
 DO  final byte[] ecallSmsTransmission = new  byte[1];
 DO  final byte[] ecallInbandDataPush = new  byte[1];
 DO  final byte[] ecallDtmfAutomaticEcall = new  byte[1];
 DO  final byte[] ecallDtmfManualEcall = new  byte[1];
 DO  final byte[] ecallDelayTimer = new  byte[1];
 DO  final byte[] ecallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ecallKeyLockTimerManualEcall = new  byte[1];
 DO  final byte[] ecallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] eCallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ecallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] scallDppConfirmed = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
--content--
  public Voice_Call_Execution_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** E_Call_Test_Mode_Numbers */
public static class E_Call_Test_Mode_Numbers {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(E_Call_Test_Mode_Numbers) 
    private final byte[] _buffer = new byte[+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(E_Call_Test_Mode_Numbers) 
    
     private static int SIZE = 0;
    private static final int Offset$EcallTestNumber = SIZE  += 20;
    private static final int Offset$EcallsmsTestDestination = SIZE  += 20;
    
    }// tplMakeInitializer(E_Call_Test_Mode_Numbers) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( E_Call_Test_Mode_Numbers other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] EcallTestNumber = new  byte[20];
 DO  final byte[] EcallsmsTestDestination = new  byte[20];
--content--
  public E_Call_Test_Mode_Numbers( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle_Configuration */
public static class Vehicle_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Configuration) 
    private final byte[] _buffer = new byte[+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$muteLine = SIZE  += 1;
    private static final int Offset$carsharing = SIZE  += 1;
    private static final int Offset$FOTA_RSWDL_Support_1 = SIZE  += 1;
    private static final int Offset$tdpResetProhibition = SIZE  += 1;
    private static final int Offset$GPS_Antenna_Type = SIZE  += 1;
    
    }// tplMakeInitializer(Vehicle_Configuration) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] muteLine = new  byte[1];
 DO  final byte[] carsharing = new  byte[1];
 DO  final byte[] FOTA_RSWDL_Support_1 = new  byte[1];
 DO  final byte[] tdpResetProhibition = new  byte[1];
 DO  final byte[] GPS_Antenna_Type = new  byte[1];
--content--
  public Vehicle_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RTM_settings 00 02 */
public static class RTM_settings_00_02 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RTM_settings_00_02) 
    private final byte[] _buffer = new byte[+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RTM_settings_00_02) 
    
     private static int SIZE = 0;
    private static final int Offset$RTMst = SIZE  += 1;
    private static final int Offset$dataTxTimer = SIZE  += 1;
    private static final int Offset$dataRxTimer = SIZE  += 1;
    private static final int Offset$dataStTimer = SIZE  += 1;
    
    }// tplMakeInitializer(RTM_settings_00_02) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RTM_settings_00_02 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RTMst = new  byte[1];
 DO  final byte[] dataTxTimer = new  byte[1];
 DO  final byte[] dataRxTimer = new  byte[1];
 DO  final byte[] dataStTimer = new  byte[1];
--content--
  public RTM_settings_00_02( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** CEBAS Settings */
public static class CEBAS_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(CEBAS_Settings) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(CEBAS_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$DID_DataObject = SIZE  += 1;
    
    }// tplMakeInitializer(CEBAS_Settings) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( CEBAS_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DID_DataObject = new  byte[1];
--content--
  public CEBAS_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RTM_settings */
public static class RTM_settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RTM_settings) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RTM_settings) 
    
     private static int SIZE = 0;
    private static final int Offset$vehicleBatteryType = SIZE  += 1;
    
    }// tplMakeInitializer(RTM_settings) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RTM_settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] vehicleBatteryType = new  byte[1];
--content--
  public RTM_settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Call_Numbers */
public static class Call_Numbers {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Call_Numbers) 
    private final byte[] _buffer = new byte[+20+20+20+20+20+20+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Call_Numbers) 
    
     private static int SIZE = 0;
    private static final int Offset$PrimaryAECall = SIZE  += 20;
    private static final int Offset$PrimaryRCall = SIZE  += 20;
    private static final int Offset$PrimaryICall = SIZE  += 20;
    private static final int Offset$PrimaryMECall = SIZE  += 20;
    private static final int Offset$SecondaryAECall = SIZE  += 20;
    private static final int Offset$SecondaryRCall = SIZE  += 20;
    private static final int Offset$SecondaryICall = SIZE  += 20;
    private static final int Offset$SecondaryMECall = SIZE  += 20;
    
    }// tplMakeInitializer(Call_Numbers) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Call_Numbers other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] PrimaryAECall = new  byte[20];
 DO  final byte[] PrimaryRCall = new  byte[20];
 DO  final byte[] PrimaryICall = new  byte[20];
 DO  final byte[] PrimaryMECall = new  byte[20];
 DO  final byte[] SecondaryAECall = new  byte[20];
 DO  final byte[] SecondaryRCall = new  byte[20];
 DO  final byte[] SecondaryICall = new  byte[20];
 DO  final byte[] SecondaryMECall = new  byte[20];
--content--
  public Call_Numbers( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Active_Sim_Profile_Data (without MTU Size) */
public static class Active_Sim_Profile_Data_without_MTU_Size {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Active_Sim_Profile_Data_without_MTU_Size) 
    private final byte[] _buffer = new byte[+20+20+101+101+101+101+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Active_Sim_Profile_Data_without_MTU_Size) 
    
     private static int SIZE = 0;
    private static final int Offset$smsDestinationEcall = SIZE  += 20;
    private static final int Offset$smsDestination = SIZE  += 20;
    private static final int Offset$IMS = SIZE  += 101;
    private static final int Offset$HOS = SIZE  += 101;
    private static final int Offset$B2B = SIZE  += 101;
    private static final int Offset$B2C = SIZE  += 101;
    private static final int Offset$IP_Version = SIZE  += 1;
    
    }// tplMakeInitializer(Active_Sim_Profile_Data_without_MTU_Size) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Active_Sim_Profile_Data_without_MTU_Size other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] smsDestinationEcall = new  byte[20];
 DO  final byte[] smsDestination = new  byte[20];
 DO  final byte[] IMS = new  byte[101];
 DO  final byte[] HOS = new  byte[101];
 DO  final byte[] B2B = new  byte[101];
 DO  final byte[] B2C = new  byte[101];
 DO  final byte[] IP_Version = new  byte[1];
--content--
  public Active_Sim_Profile_Data_without_MTU_Size( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MNO_Switch_State_Log 1 */
public static class MNO_Switch_State_Log_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MNO_Switch_State_Log_1) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MNO_Switch_State_Log_1) 
    
     private static int SIZE = 0;
    private static final int Offset$MNO_Switch_State_1 = SIZE  += 1;
    private static final int Offset$Date_State_1 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_2 = SIZE  += 1;
    private static final int Offset$Date_State_2 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_3 = SIZE  += 1;
    private static final int Offset$Date_State_3 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_4 = SIZE  += 1;
    private static final int Offset$Date_State_4 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_5 = SIZE  += 1;
    private static final int Offset$Date_State_5 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_6 = SIZE  += 1;
    private static final int Offset$Date_State_6 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_7 = SIZE  += 1;
    private static final int Offset$Date_State_7 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_8 = SIZE  += 1;
    private static final int Offset$Date_State_8 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_9 = SIZE  += 1;
    private static final int Offset$Date_State_9 = SIZE  += 1;
    private static final int Offset$MNO_Switch_State_10 = SIZE  += 1;
    private static final int Offset$Date_State_10 = SIZE  += 1;
    
    }// tplMakeInitializer(MNO_Switch_State_Log_1) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MNO_Switch_State_Log_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] MNO_Switch_State_1 = new  byte[1];
 DO  final byte[] Date_State_1 = new  byte[1];
 DO  final byte[] MNO_Switch_State_2 = new  byte[1];
 DO  final byte[] Date_State_2 = new  byte[1];
 DO  final byte[] MNO_Switch_State_3 = new  byte[1];
 DO  final byte[] Date_State_3 = new  byte[1];
 DO  final byte[] MNO_Switch_State_4 = new  byte[1];
 DO  final byte[] Date_State_4 = new  byte[1];
 DO  final byte[] MNO_Switch_State_5 = new  byte[1];
 DO  final byte[] Date_State_5 = new  byte[1];
 DO  final byte[] MNO_Switch_State_6 = new  byte[1];
 DO  final byte[] Date_State_6 = new  byte[1];
 DO  final byte[] MNO_Switch_State_7 = new  byte[1];
 DO  final byte[] Date_State_7 = new  byte[1];
 DO  final byte[] MNO_Switch_State_8 = new  byte[1];
 DO  final byte[] Date_State_8 = new  byte[1];
 DO  final byte[] MNO_Switch_State_9 = new  byte[1];
 DO  final byte[] Date_State_9 = new  byte[1];
 DO  final byte[] MNO_Switch_State_10 = new  byte[1];
 DO  final byte[] Date_State_10 = new  byte[1];
--content--
  public MNO_Switch_State_Log_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MultiAPNStatus 1 */
public static class MultiAPNStatus_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MultiAPNStatus_1) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MultiAPNStatus_1) 
    
     private static int SIZE = 0;
    private static final int Offset$MultiAPNStatus = SIZE  += 1;
    
    }// tplMakeInitializer(MultiAPNStatus_1) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MultiAPNStatus_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] MultiAPNStatus = new  byte[1];
--content--
  public MultiAPNStatus_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag_oVCI_ECU_List_incl_dynamic_content 1 Ramses Var 00 01 */
public static class RDiag_oVCI_ECU_List_incl_dynamic_content_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_oVCI_ECU_List_incl_dynamic_content_1) 
    private final byte[] _buffer = new byte[+600];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_oVCI_ECU_List_incl_dynamic_content_1) 
    
     private static int SIZE = 0;
    private static final int Offset$HexDump_ECUList_including_dynamic_content = SIZE  += 600;
    
    }// tplMakeInitializer(RDiag_oVCI_ECU_List_incl_dynamic_content_1) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 600;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_oVCI_ECU_List_incl_dynamic_content_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] HexDump_ECUList_including_dynamic_content = new  byte[600];
--content--
  public RDiag_oVCI_ECU_List_incl_dynamic_content_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 10 */
public static class RDiag_Trigger_Slot_10 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_10) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_10) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event_1 = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_10) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_10 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event_1 = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_10( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 9 */
public static class RDiag_Trigger_Slot_9 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_9) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_9) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_9) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_9 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_9( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 8 */
public static class RDiag_Trigger_Slot_8 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_8) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_8) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_8) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_8 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_8( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 7 */
public static class RDiag_Trigger_Slot_7 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_7) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_7) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_7) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_7 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_7( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 6 */
public static class RDiag_Trigger_Slot_6 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_6) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_6) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_6) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_6 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_6( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 5 */
public static class RDiag_Trigger_Slot_5 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_5) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_5) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_5) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_5 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_5( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 4 */
public static class RDiag_Trigger_Slot_4 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_4) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_4) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_4) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_4 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_4( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 3 */
public static class RDiag_Trigger_Slot_3 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_3) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_3) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_3) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_3 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_3( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 2 */
public static class RDiag_Trigger_Slot_2 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_2) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_2) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_2) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_2 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_2( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Trigger Slot 1 */
public static class RDiag_Trigger_Slot_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Trigger_Slot_1) 
    private final byte[] _buffer = new byte[+1+1+1+2+1+2+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Trigger_Slot_1) 
    
     private static int SIZE = 0;
    private static final int Offset$Ignition_On = SIZE  += 1;
    private static final int Offset$Ignition_Off = SIZE  += 1;
    private static final int Offset$Periodic_Based_On_Odo = SIZE  += 1;
    private static final int Offset$Odo_Intervall = SIZE  += 2;
    private static final int Offset$Periodic_Based_On_Time = SIZE  += 1;
    private static final int Offset$Time_Intervall = SIZE  += 2;
    private static final int Offset$IC_Warning_Message = SIZE  += 1;
    private static final int Offset$IC_Indicator_Lamp = SIZE  += 1;
    private static final int Offset$Tester_Detected = SIZE  += 1;
    private static final int Offset$ROE_DTC_Event = SIZE  += 1;
    private static final int Offset$ROE_Obsolescence_Data = SIZE  += 1;
    private static final int Offset$ROE_Consumables_Data = SIZE  += 1;
    private static final int Offset$ROE_Availability_Data = SIZE  += 1;
    private static final int Offset$ROE_Security_Event = SIZE  += 1;
    private static final int Offset$Roadside_Assistance_Call = SIZE  += 1;
    private static final int Offset$Information_Call = SIZE  += 1;
    private static final int Offset$Address_Book_Call = SIZE  += 1;
    private static final int Offset$Accident_Mgmt = SIZE  += 1;
    private static final int Offset$Breakdown_Mgmt = SIZE  += 1;
    private static final int Offset$Maintenance_Mgmt = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_Trigger_Slot_1) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,100 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0,60 );
        currentOffset += 2;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Trigger_Slot_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Ignition_On = new  byte[1];
 DO  final byte[] Ignition_Off = new  byte[1];
 DO  final byte[] Periodic_Based_On_Odo = new  byte[1];
 DO  final byte[] Odo_Intervall = new  byte[2];
 DO  final byte[] Periodic_Based_On_Time = new  byte[1];
 DO  final byte[] Time_Intervall = new  byte[2];
 DO  final byte[] IC_Warning_Message = new  byte[1];
 DO  final byte[] IC_Indicator_Lamp = new  byte[1];
 DO  final byte[] Tester_Detected = new  byte[1];
 DO  final byte[] ROE_DTC_Event = new  byte[1];
 DO  final byte[] ROE_Obsolescence_Data = new  byte[1];
 DO  final byte[] ROE_Consumables_Data = new  byte[1];
 DO  final byte[] ROE_Availability_Data = new  byte[1];
 DO  final byte[] ROE_Security_Event = new  byte[1];
 DO  final byte[] Roadside_Assistance_Call = new  byte[1];
 DO  final byte[] Information_Call = new  byte[1];
 DO  final byte[] Address_Book_Call = new  byte[1];
 DO  final byte[] Accident_Mgmt = new  byte[1];
 DO  final byte[] Breakdown_Mgmt = new  byte[1];
 DO  final byte[] Maintenance_Mgmt = new  byte[1];
--content--
  public RDiag_Trigger_Slot_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Configuration */
public static class RDiag_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Configuration) 
    private final byte[] _buffer = new byte[+2+1+2+2];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$ECU_discovery_timer = SIZE  += 2;
    private static final int Offset$Delay_RDSC_after_Ignition_On_Trigger = SIZE  += 1;
    private static final int Offset$Timeout_driver_interaction = SIZE  += 2;
    private static final int Offset$Timeout_External_Tester_Disconnect = SIZE  += 2;
    
    }// tplMakeInitializer(RDiag_Configuration) 
    
    {
        int currentOffset = 0;
        copyTo( 1,80 );
        currentOffset += 2;
      
        copyTo( 90 );
        currentOffset += 1;
      
        copyTo( 0,30 );
        currentOffset += 2;
      
        copyTo( 1,44 );
        currentOffset += 2;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ECU_discovery_timer = new  byte[2];
 DO  final byte[] Delay_RDSC_after_Ignition_On_Trigger = new  byte[1];
 DO  final byte[] Timeout_driver_interaction = new  byte[2];
 DO  final byte[] Timeout_External_Tester_Disconnect = new  byte[2];
--content--
  public RDiag_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Communication Blacklist */
public static class RDiag_Communication_Blacklist {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Communication_Blacklist) 
    private final byte[] _buffer = new byte[+60];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Communication_Blacklist) 
    
     private static int SIZE = 0;
    private static final int Offset$RDiag_Communication_Blacklist = SIZE  += 60;
    
    }// tplMakeInitializer(RDiag_Communication_Blacklist) 
    
    {
        int currentOffset = 0;
        copyTo( 255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 60;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Communication_Blacklist other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RDiag_Communication_Blacklist = new  byte[60];
--content--
  public RDiag_Communication_Blacklist( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Indicator Lamps/Messages */
public static class RDiag_Indicator_Lamps_Messages {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Indicator_Lamps_Messages) 
    private final byte[] _buffer = new byte[+600];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Indicator_Lamps_Messages) 
    
     private static int SIZE = 0;
    private static final int Offset$Warning_Messages = SIZE  += 600;
    
    }// tplMakeInitializer(RDiag_Indicator_Lamps_Messages) 
    
    {
        int currentOffset = 0;
        copyTo( 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 600;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Indicator_Lamps_Messages other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Warning_Messages = new  byte[600];
--content--
  public RDiag_Indicator_Lamps_Messages( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag oVCI Default CommParam */
public static class RDiag_oVCI_Default_CommParam {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_oVCI_Default_CommParam) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_oVCI_Default_CommParam) 
    
     private static int SIZE = 0;
    private static final int Offset$CP_DoIPConnectionCloseDelay = SIZE  += 1;
    private static final int Offset$CP_ModifyTiming = SIZE  += 1;
    private static final int Offset$CP_NetworkTransmissionTime = SIZE  += 1;
    private static final int Offset$CP_P2Max_Ecu = SIZE  += 1;
    private static final int Offset$CP_P2Min = SIZE  += 1;
    private static final int Offset$CP_P3Phys = SIZE  += 1;
    private static final int Offset$CP_P6Max = SIZE  += 1;
    private static final int Offset$CP_P6Star = SIZE  += 1;
    private static final int Offset$CP_RC21CompletionTimeout = SIZE  += 1;
    private static final int Offset$CP_RC21Handling = SIZE  += 1;
    private static final int Offset$CP_RC21RequestTime = SIZE  += 1;
    private static final int Offset$CP_RC23CompletionTimeout = SIZE  += 1;
    private static final int Offset$CP_RC23Handling = SIZE  += 1;
    private static final int Offset$CP_RC23RequestTime = SIZE  += 1;
    private static final int Offset$CP_RC78CompletionTimeout = SIZE  += 1;
    private static final int Offset$CP_RC78Handling = SIZE  += 1;
    private static final int Offset$CP_RCByteOffset = SIZE  += 1;
    private static final int Offset$CP_SessionTiming_Ecu = SIZE  += 1;
    private static final int Offset$CP_SessionTimingOverride = SIZE  += 1;
    private static final int Offset$CP_DoIPDiagnosticAckTimeout = SIZE  += 1;
    private static final int Offset$CP_DoIPRoutingActivationTimeout = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_oVCI_Default_CommParam) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_oVCI_Default_CommParam other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] CP_DoIPConnectionCloseDelay = new  byte[1];
 DO  final byte[] CP_ModifyTiming = new  byte[1];
 DO  final byte[] CP_NetworkTransmissionTime = new  byte[1];
 DO  final byte[] CP_P2Max_Ecu = new  byte[1];
 DO  final byte[] CP_P2Min = new  byte[1];
 DO  final byte[] CP_P3Phys = new  byte[1];
 DO  final byte[] CP_P6Max = new  byte[1];
 DO  final byte[] CP_P6Star = new  byte[1];
 DO  final byte[] CP_RC21CompletionTimeout = new  byte[1];
 DO  final byte[] CP_RC21Handling = new  byte[1];
 DO  final byte[] CP_RC21RequestTime = new  byte[1];
 DO  final byte[] CP_RC23CompletionTimeout = new  byte[1];
 DO  final byte[] CP_RC23Handling = new  byte[1];
 DO  final byte[] CP_RC23RequestTime = new  byte[1];
 DO  final byte[] CP_RC78CompletionTimeout = new  byte[1];
 DO  final byte[] CP_RC78Handling = new  byte[1];
 DO  final byte[] CP_RCByteOffset = new  byte[1];
 DO  final byte[] CP_SessionTiming_Ecu = new  byte[1];
 DO  final byte[] CP_SessionTimingOverride = new  byte[1];
 DO  final byte[] CP_DoIPDiagnosticAckTimeout = new  byte[1];
 DO  final byte[] CP_DoIPRoutingActivationTimeout = new  byte[1];
--content--
  public RDiag_oVCI_Default_CommParam( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag ECU List */
public static class RDiag_ECU_List {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_ECU_List) 
    private final byte[] _buffer = new byte[+3700];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_ECU_List) 
    
     private static int SIZE = 0;
    private static final int Offset$HexDump_ECUList = SIZE  += 3700;
    
    }// tplMakeInitializer(RDiag_ECU_List) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 3700;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_ECU_List other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] HexDump_ECUList = new  byte[3700];
--content--
  public RDiag_ECU_List( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle_Configuration 00 02 */
public static class Vehicle_Configuration_00_02 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Configuration_00_02) 
    private final byte[] _buffer = new byte[+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Configuration_00_02) 
    
     private static int SIZE = 0;
    private static final int Offset$audioParameterSetSelection = SIZE  += 1;
    private static final int Offset$muteLine = SIZE  += 1;
    private static final int Offset$carsharing = SIZE  += 1;
    private static final int Offset$FOTA_RSWDL_Support_1 = SIZE  += 1;
    private static final int Offset$tdpResetProhibition = SIZE  += 1;
    
    }// tplMakeInitializer(Vehicle_Configuration_00_02) 
    
    {
        int currentOffset = 0;
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Configuration_00_02 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] audioParameterSetSelection = new  byte[1];
 DO  final byte[] muteLine = new  byte[1];
 DO  final byte[] carsharing = new  byte[1];
 DO  final byte[] FOTA_RSWDL_Support_1 = new  byte[1];
 DO  final byte[] tdpResetProhibition = new  byte[1];
--content--
  public Vehicle_Configuration_00_02( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Voice_Call_Execution_Settings 00 02 */
public static class Voice_Call_Execution_Settings_00_02 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Voice_Call_Execution_Settings_00_02) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Voice_Call_Execution_Settings_00_02) 
    
     private static int SIZE = 0;
    private static final int Offset$voiceCallMuteDuration = SIZE  += 1;
    private static final int Offset$ecallPsapCallingStrategy = SIZE  += 1;
    private static final int Offset$ecallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$ecallSmsTransmission = SIZE  += 1;
    private static final int Offset$ecallInbandDataPush = SIZE  += 1;
    private static final int Offset$ecallDtmfAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallDtmfManualEcall = SIZE  += 1;
    private static final int Offset$ecallDelayTimer = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerManualEcall = SIZE  += 1;
    private static final int Offset$ecallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$eCallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ecallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$scallDppConfirmed = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    
    }// tplMakeInitializer(Voice_Call_Execution_Settings_00_02) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Voice_Call_Execution_Settings_00_02 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] voiceCallMuteDuration = new  byte[1];
 DO  final byte[] ecallPsapCallingStrategy = new  byte[1];
 DO  final byte[] ecallAtpDataTransmission = new  byte[1];
 DO  final byte[] ecallSmsTransmission = new  byte[1];
 DO  final byte[] ecallInbandDataPush = new  byte[1];
 DO  final byte[] ecallDtmfAutomaticEcall = new  byte[1];
 DO  final byte[] ecallDtmfManualEcall = new  byte[1];
 DO  final byte[] ecallDelayTimer = new  byte[1];
 DO  final byte[] ecallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ecallKeyLockTimerManualEcall = new  byte[1];
 DO  final byte[] ecallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] eCallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ecallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] scallDppConfirmed = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
--content--
  public Voice_Call_Execution_Settings_00_02( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Read Status Report */
public static class RDiag_Read_Status_Report {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Read_Status_Report) 
    private final byte[] _buffer = new byte[+2048];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Read_Status_Report) 
    
     private static int SIZE = 0;
    private static final int Offset$HexDump_Status_Report = SIZE  += 2048;
    
    }// tplMakeInitializer(RDiag_Read_Status_Report) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 2048;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Read_Status_Report other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] HexDump_Status_Report = new  byte[2048];
--content--
  public RDiag_Read_Status_Report( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag RDSC Activation */
public static class RDiag_RDSC_Activation {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_RDSC_Activation) 
    private final byte[] _buffer = new byte[+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_RDSC_Activation) 
    
     private static int SIZE = 0;
    private static final int Offset$RDSC_Activation_Status = SIZE  += ;
    
    }// tplMakeInitializer(RDiag_RDSC_Activation) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_RDSC_Activation other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RDSC_Activation_Status = new  byte[];
--content--
  public RDiag_RDSC_Activation( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** GetMobileNetworkDataCount */
public static class GetMobileNetworkDataCount {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(GetMobileNetworkDataCount) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(GetMobileNetworkDataCount) 
    
     private static int SIZE = 0;
    private static final int Offset$outgoingSMS = SIZE  += 1;
    private static final int Offset$incomingSMS = SIZE  += 1;
    private static final int Offset$outgoingCallMinutes = SIZE  += 1;
    private static final int Offset$incomingCallMinutes = SIZE  += 1;
    private static final int Offset$outgoingAPN1Data = SIZE  += 1;
    private static final int Offset$incomingAPN1Data = SIZE  += 1;
    private static final int Offset$outgoingAPN2Data = SIZE  += 1;
    private static final int Offset$incomingAPN2Data = SIZE  += 1;
    private static final int Offset$outgoingAPN3Data = SIZE  += 1;
    private static final int Offset$incomingAPN3Data = SIZE  += 1;
    private static final int Offset$outgoingAPN4Data = SIZE  += 1;
    private static final int Offset$incomingAPN4Data = SIZE  += 1;
    private static final int Offset$DatacountServices = SIZE  += ;
    
    }// tplMakeInitializer(GetMobileNetworkDataCount) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += ;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( GetMobileNetworkDataCount other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] outgoingSMS = new  byte[1];
 DO  final byte[] incomingSMS = new  byte[1];
 DO  final byte[] outgoingCallMinutes = new  byte[1];
 DO  final byte[] incomingCallMinutes = new  byte[1];
 DO  final byte[] outgoingAPN1Data = new  byte[1];
 DO  final byte[] incomingAPN1Data = new  byte[1];
 DO  final byte[] outgoingAPN2Data = new  byte[1];
 DO  final byte[] incomingAPN2Data = new  byte[1];
 DO  final byte[] outgoingAPN3Data = new  byte[1];
 DO  final byte[] incomingAPN3Data = new  byte[1];
 DO  final byte[] outgoingAPN4Data = new  byte[1];
 DO  final byte[] incomingAPN4Data = new  byte[1];
 DO  final byte[] DatacountServices = new  byte[];
--content--
  public GetMobileNetworkDataCount( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ControlDebugInterface */
public static class ControlDebugInterface {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ControlDebugInterface) 
    private final byte[] _buffer = new byte[+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ControlDebugInterface) 
    
     private static int SIZE = 0;
    private static final int Offset$DebugInterfaceActive = SIZE  += 1;
    private static final int Offset$TRACEBUFFER_MAXSIZE = SIZE  += 1;
    private static final int Offset$MAXNUM_TRIGGER_LOGPACKAGE = SIZE  += 1;
    
    }// tplMakeInitializer(ControlDebugInterface) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ControlDebugInterface other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DebugInterfaceActive = new  byte[1];
 DO  final byte[] TRACEBUFFER_MAXSIZE = new  byte[1];
 DO  final byte[] MAXNUM_TRIGGER_LOGPACKAGE = new  byte[1];
--content--
  public ControlDebugInterface( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ERA 54620 Appendix A Parameter */
public static class ERA_54620_Appendix_A_Parameter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ERA_54620_Appendix_A_Parameter) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ERA_54620_Appendix_A_Parameter) 
    
     private static int SIZE = 0;
    private static final int Offset$callAutoAnswerTime = SIZE  += 1;
    private static final int Offset$postTestRegistrationTime = SIZE  += 1;
    private static final int Offset$testModeEndDistance = SIZE  += 1;
    private static final int Offset$intMemTransmitInterval = SIZE  += 1;
    private static final int Offset$intMemTransmitAttempts = SIZE  += 1;
    private static final int Offset$ccft = SIZE  += 1;
    private static final int Offset$msdMaxTransmissionTime = SIZE  += 1;
    private static final int Offset$ecallNoAutomaticTriggering = SIZE  += 1;
    private static final int Offset$ecallDialDuration = SIZE  += 1;
    private static final int Offset$ecallAutoDialAttempts = SIZE  += 1;
    private static final int Offset$ecallManualDialAttempts = SIZE  += 1;
    private static final int Offset$testRegistrationPeriod = SIZE  += 1;
    private static final int Offset$gnssDataRate = SIZE  += 1;
    private static final int Offset$gnssMinElevation = SIZE  += 1;
    private static final int Offset$CoordinateSystem = SIZE  += 1;
    
    }// tplMakeInitializer(ERA_54620_Appendix_A_Parameter) 
    
    {
        int currentOffset = 0;
        copyTo( 20 );
        currentOffset += 1;
      
        copyTo( 12 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
        copyTo( 12 );
        currentOffset += 1;
      
        copyTo( 20 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ERA_54620_Appendix_A_Parameter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] callAutoAnswerTime = new  byte[1];
 DO  final byte[] postTestRegistrationTime = new  byte[1];
 DO  final byte[] testModeEndDistance = new  byte[1];
 DO  final byte[] intMemTransmitInterval = new  byte[1];
 DO  final byte[] intMemTransmitAttempts = new  byte[1];
 DO  final byte[] ccft = new  byte[1];
 DO  final byte[] msdMaxTransmissionTime = new  byte[1];
 DO  final byte[] ecallNoAutomaticTriggering = new  byte[1];
 DO  final byte[] ecallDialDuration = new  byte[1];
 DO  final byte[] ecallAutoDialAttempts = new  byte[1];
 DO  final byte[] ecallManualDialAttempts = new  byte[1];
 DO  final byte[] testRegistrationPeriod = new  byte[1];
 DO  final byte[] gnssDataRate = new  byte[1];
 DO  final byte[] gnssMinElevation = new  byte[1];
 DO  final byte[] CoordinateSystem = new  byte[1];
--content--
  public ERA_54620_Appendix_A_Parameter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MRS Measurement Message */
public static class MRS_Measurement_Message {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MRS_Measurement_Message) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MRS_Measurement_Message) 
    
     private static int SIZE = 0;
    private static final int Offset$DID_DataObject = SIZE  += 1;
    
    }// tplMakeInitializer(MRS_Measurement_Message) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MRS_Measurement_Message other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DID_DataObject = new  byte[1];
--content--
  public MRS_Measurement_Message( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MMC Region */
public static class MMC_Region {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MMC_Region) 
    private final byte[] _buffer = new byte[+10];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MMC_Region) 
    
     private static int SIZE = 0;
    private static final int Offset$MMC_Region = SIZE  += 10;
    
    }// tplMakeInitializer(MMC_Region) 
    
    {
        int currentOffset = 0;
        copyTo( 69,67,69,95,80,82,79,68,0,0 );
        currentOffset += 10;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MMC_Region other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] MMC_Region = new  byte[10];
--content--
  public MMC_Region( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** AudioParameterSet 1 */
public static class AudioParameterSet_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(AudioParameterSet_1) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(AudioParameterSet_1) 
    
     private static int SIZE = 0;
    private static final int Offset$Audio_Parameter_Set_1 = SIZE  += 4000;
    
    }// tplMakeInitializer(AudioParameterSet_1) 
    
    {
        int currentOffset = 0;
        copyTo( 0,0,0,0,0,0,21,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,0,0,51,51,0,0,0,0,0,0,0,0,66,0,0,0,6,0,0,0,250,255,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,55,0,0,0,0,0,0,0,250,255,0,0,12,0,0,0,6,0,0,0,4,0,0,0,2,0,102,38,0,0,205,76,0,0,205,76,0,0,0,0,255,255,0,0,73,0,0,0,2,0,0,0,0,0,0,0,88,2,0,0,1,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,43,15,1,0,174,241,0,0,188,149,1,0,134,161,0,0,0,0,0,0,43,15,1,0,174,241,0,0,188,149,1,0,134,161,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,254,127,0,0,250,255,0,0,1,0,0,0,1,0,0,0,100,0,0,0,0,0,0,0,88,2,0,0,88,2,0,0,13,0,0,0,2,0,102,38,0,0,0,0,5,0,0,0,0,0,0,0,231,255,0,0,226,255,0,128,0,0,205,12,0,0,0,0,1,0,0,0,2,0,0,0,32,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,24,21,0,64,0,0,0,0,1,0,0,0,0,0,205,76,0,0,0,0,1,0,0,0,76,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,88,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,253,255,0,0,253,255,0,0,253,255,0,0,253,255,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,255,255,0,0,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,64,0,0,0,192,255,255,0,0,0,0,0,0,0,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,22,0,0,0,42,0,0,0,248,255,0,0,0,0,0,0,0,0,0,0,10,0,0,0,10,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,10,0,0,0,88,2,0,0,6,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,242,255,0,0,244,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,1,0,0,0,8,0,92,15,0,0,0,0,1,0,205,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,3,0,61,10,0,0,0,0,1,0,0,0,0,0,0,0,250,255,0,0,250,255,0,0,0,0,0,0,100,0,0,0,0,0,0,0,248,255,0,128,0,0,0,0,1,0,0,0,232,3,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,205,12,0,0,0,0,0,0,0,0,1,0,0,0,42,0,0,0,22,0,154,153,0,0,154,153,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,128,0,0,154,217,0,0,0,64,1,0,0,0,236,255,0,0,250,255,0,0,6,0,0,0,10,0,0,0,100,0,102,230,0,0,0,0,52,0,0,0,60,0,0,0,60,0,0,0,52,0,0,0,10,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,15,0,0,0,1,0,0,0,0,1,0,0,60,15,0,0,0,0,0,0,25,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,116,14,0,128,0,0,0,0,44,1,205,204,0,0,0,0,232,3,0,0,8,0,0,0,2,0,0,0,96,9,0,0,249,255,0,0,1,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,3,0,0,0,1,0,0,0,250,255,0,0,3,0,0,0,1,0,0,0,0,0,102,230,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,216,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,128,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,154,25,0,0,0,0,4,0,113,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,0,0,250,255,0,0,1,0,0,0,1,0,0,0,0,0,0,0,10,0,0,0,5,0,0,0,10,0,0,0,2,0,0,0,236,255,0,0,0,0,0,0,236,255,0,0,236,255,0,0,250,255,0,0,250,255,0,0,250,255,0,0,250,255,0,0,0,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,10,0,0,0,5,0,0,0,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( AudioParameterSet_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Audio_Parameter_Set_1 = new  byte[4000];
--content--
  public AudioParameterSet_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** AudioParameterSet 2 */
public static class AudioParameterSet_2 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(AudioParameterSet_2) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(AudioParameterSet_2) 
    
     private static int SIZE = 0;
    private static final int Offset$Audio_Parameter_Set_2 = SIZE  += 4000;
    
    }// tplMakeInitializer(AudioParameterSet_2) 
    
    {
        int currentOffset = 0;
        copyTo( 0,0,0,0,0,0,21,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,0,0,51,51,0,0,0,0,1,0,0,0,66,0,0,0,6,0,0,0,250,255,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,66,0,0,0,0,0,0,0,250,255,0,0,12,0,0,0,6,0,0,0,4,0,0,0,2,0,102,38,0,0,205,76,0,0,205,76,0,0,0,0,255,255,0,0,51,0,0,0,2,0,0,0,0,0,0,0,88,2,0,0,1,0,0,0,70,0,0,0,0,0,0,0,1,0,0,0,0,0,43,15,1,0,174,241,0,0,188,149,1,0,134,161,0,0,0,0,0,0,43,15,1,0,174,241,0,0,188,149,1,0,134,161,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,254,127,0,0,250,255,0,0,1,0,0,0,1,0,0,0,100,0,0,0,0,0,0,0,88,2,0,0,88,2,0,0,13,0,0,0,3,0,154,25,0,0,0,0,5,0,0,0,0,0,0,0,231,255,0,0,226,255,0,128,0,0,205,12,0,0,0,0,1,0,0,0,2,0,0,0,32,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,24,21,0,0,1,0,0,0,1,0,0,0,0,0,205,76,0,0,0,0,1,0,0,0,85,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,85,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,64,0,0,0,192,255,255,0,0,0,0,0,0,0,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,28,0,0,0,56,0,0,128,251,255,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,10,0,0,0,88,2,0,0,6,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,236,255,0,0,244,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,1,0,0,0,8,0,92,15,0,0,0,0,1,0,205,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,3,0,61,10,0,0,0,0,1,0,0,0,0,0,0,0,250,255,0,0,250,255,0,0,0,0,0,0,100,0,0,0,0,0,0,0,248,255,0,128,0,0,0,0,1,0,0,0,232,3,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,205,12,0,0,0,0,0,0,0,0,1,0,0,0,60,0,0,0,40,0,154,153,0,0,154,153,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,128,0,0,154,217,0,0,0,64,1,0,0,0,236,255,0,0,250,255,0,0,6,0,0,0,10,0,0,0,100,0,102,230,0,0,0,0,52,0,0,0,60,0,0,0,60,0,0,0,52,0,0,0,10,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,15,0,0,0,0,0,0,0,0,1,0,0,60,15,0,0,0,0,0,0,25,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,60,15,0,0,0,0,0,0,25,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,3,0,0,0,1,0,0,0,250,255,0,0,3,0,0,0,1,0,0,0,0,0,102,230,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,216,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,128,4,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,30,0,0,0,1,0,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,154,25,0,0,0,0,4,0,113,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,255,0,0,250,255,0,0,1,0,0,0,1,0,0,0,0,0,0,0,10,0,0,0,5,0,0,0,10,0,0,0,2,0,0,0,236,255,0,0,0,0,0,0,236,255,0,0,236,255,0,0,250,255,0,0,250,255,0,0,250,255,0,0,250,255,0,0,0,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,10,0,0,0,5,0,0,0,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( AudioParameterSet_2 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Audio_Parameter_Set_2 = new  byte[4000];
--content--
  public AudioParameterSet_2( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Remote Update SW Module Simulation */
public static class Remote_Update_SW_Module_Simulation {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Remote_Update_SW_Module_Simulation) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Remote_Update_SW_Module_Simulation) 
    
     private static int SIZE = 0;
    private static final int Offset$Update_Manager = SIZE  += 1;
    private static final int Offset$Update_Confirmation_Checker = SIZE  += 1;
    private static final int Offset$Release_Manager = SIZE  += 1;
    private static final int Offset$Ramses_Variant_Coding_Installer = SIZE  += 1;
    private static final int Offset$Ramses_Firmware_Installer = SIZE  += 1;
    private static final int Offset$Ramses_Script_Installer = SIZE  += 1;
    private static final int Offset$FOTA_Installer = SIZE  += 1;
    private static final int Offset$Vehicle_Permission_Checker = SIZE  += 1;
    private static final int Offset$_reserved_1 = SIZE  += 1;
    private static final int Offset$_reserved_2 = SIZE  += 1;
    private static final int Offset$_reserved_3 = SIZE  += 1;
    private static final int Offset$_reserved_4 = SIZE  += 1;
    private static final int Offset$_reserved_5 = SIZE  += 1;
    
    }// tplMakeInitializer(Remote_Update_SW_Module_Simulation) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Remote_Update_SW_Module_Simulation other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Update_Manager = new  byte[1];
 DO  final byte[] Update_Confirmation_Checker = new  byte[1];
 DO  final byte[] Release_Manager = new  byte[1];
 DO  final byte[] Ramses_Variant_Coding_Installer = new  byte[1];
 DO  final byte[] Ramses_Firmware_Installer = new  byte[1];
 DO  final byte[] Ramses_Script_Installer = new  byte[1];
 DO  final byte[] FOTA_Installer = new  byte[1];
 DO  final byte[] Vehicle_Permission_Checker = new  byte[1];
 DO  final byte[] _reserved_1 = new  byte[1];
 DO  final byte[] _reserved_2 = new  byte[1];
 DO  final byte[] _reserved_3 = new  byte[1];
 DO  final byte[] _reserved_4 = new  byte[1];
 DO  final byte[] _reserved_5 = new  byte[1];
--content--
  public Remote_Update_SW_Module_Simulation( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Remote Update History */
public static class Remote_Update_History {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Remote_Update_History) 
    private final byte[] _buffer = new byte[+16+255+16+255+16+255+16+255+16+255+16+255+16+255+16+255+16+255+16+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Remote_Update_History) 
    
     private static int SIZE = 0;
    private static final int Offset$Package_ID_1 = SIZE  += 16;
    private static final int Offset$Package_Status_1 = SIZE  += 255;
    private static final int Offset$Package_ID_2 = SIZE  += 16;
    private static final int Offset$Package_Status_2 = SIZE  += 255;
    private static final int Offset$Package_ID_3 = SIZE  += 16;
    private static final int Offset$Package_Status_3 = SIZE  += 255;
    private static final int Offset$Package_ID_4 = SIZE  += 16;
    private static final int Offset$Package_Status_4 = SIZE  += 255;
    private static final int Offset$Package_ID_5 = SIZE  += 16;
    private static final int Offset$Package_Status_5 = SIZE  += 255;
    private static final int Offset$Package_ID_6 = SIZE  += 16;
    private static final int Offset$Package_Status_6 = SIZE  += 255;
    private static final int Offset$Package_ID_7 = SIZE  += 16;
    private static final int Offset$Package_Status_7 = SIZE  += 255;
    private static final int Offset$Package_ID_8 = SIZE  += 16;
    private static final int Offset$Package_Status_8 = SIZE  += 255;
    private static final int Offset$Package_ID_9 = SIZE  += 16;
    private static final int Offset$Package_Status_9 = SIZE  += 255;
    private static final int Offset$Package_ID_10 = SIZE  += 16;
    private static final int Offset$Package_Status_10 = SIZE  += 255;
    
    }// tplMakeInitializer(Remote_Update_History) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Remote_Update_History other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Package_ID_1 = new  byte[16];
 DO  final byte[] Package_Status_1 = new  byte[255];
 DO  final byte[] Package_ID_2 = new  byte[16];
 DO  final byte[] Package_Status_2 = new  byte[255];
 DO  final byte[] Package_ID_3 = new  byte[16];
 DO  final byte[] Package_Status_3 = new  byte[255];
 DO  final byte[] Package_ID_4 = new  byte[16];
 DO  final byte[] Package_Status_4 = new  byte[255];
 DO  final byte[] Package_ID_5 = new  byte[16];
 DO  final byte[] Package_Status_5 = new  byte[255];
 DO  final byte[] Package_ID_6 = new  byte[16];
 DO  final byte[] Package_Status_6 = new  byte[255];
 DO  final byte[] Package_ID_7 = new  byte[16];
 DO  final byte[] Package_Status_7 = new  byte[255];
 DO  final byte[] Package_ID_8 = new  byte[16];
 DO  final byte[] Package_Status_8 = new  byte[255];
 DO  final byte[] Package_ID_9 = new  byte[16];
 DO  final byte[] Package_Status_9 = new  byte[255];
 DO  final byte[] Package_ID_10 = new  byte[16];
 DO  final byte[] Package_Status_10 = new  byte[255];
--content--
  public Remote_Update_History( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Remote Update Scenario */
public static class Remote_Update_Scenario {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Remote_Update_Scenario) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Remote_Update_Scenario) 
    
     private static int SIZE = 0;
    private static final int Offset$Remote_Update_Scenario = SIZE  += 1;
    
    }// tplMakeInitializer(Remote_Update_Scenario) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Remote_Update_Scenario other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Remote_Update_Scenario = new  byte[1];
--content--
  public Remote_Update_Scenario( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** CommStack DownloadRelease */
public static class CommStack_DownloadRelease {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(CommStack_DownloadRelease) 
    private final byte[] _buffer = new byte[+44];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(CommStack_DownloadRelease) 
    
     private static int SIZE = 0;
    private static final int Offset$DID_DataObject = SIZE  += 44;
    
    }// tplMakeInitializer(CommStack_DownloadRelease) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 44;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( CommStack_DownloadRelease other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DID_DataObject = new  byte[44];
--content--
  public CommStack_DownloadRelease( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TraceSettings */
public static class TraceSettings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TraceSettings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TraceSettings) 
    
     private static int SIZE = 0;
    private static final int Offset$LocalBufferSize_BootLog = SIZE  += 1;
    private static final int Offset$LocalBufferSize_ApplicationLog = SIZE  += 1;
    private static final int Offset$LocalBufferSize_GnssTrace = SIZE  += 1;
    private static final int Offset$LocalBufferSize_ModemTrace = SIZE  += 1;
    private static final int Offset$LocalBufferSize_IPTrace = SIZE  += 1;
    private static final int Offset$LogPackageMaxCount = SIZE  += 255;
    
    }// tplMakeInitializer(TraceSettings) 
    
    {
        int currentOffset = 0;
        copyTo( 20 );
        currentOffset += 1;
      
        copyTo( 728 );
        currentOffset += 1;
      
        copyTo( 200 );
        currentOffset += 1;
      
        copyTo( 900 );
        currentOffset += 1;
      
        copyTo( 200 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TraceSettings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] LocalBufferSize_BootLog = new  byte[1];
 DO  final byte[] LocalBufferSize_ApplicationLog = new  byte[1];
 DO  final byte[] LocalBufferSize_GnssTrace = new  byte[1];
 DO  final byte[] LocalBufferSize_ModemTrace = new  byte[1];
 DO  final byte[] LocalBufferSize_IPTrace = new  byte[1];
 DO  final byte[] LogPackageMaxCount = new  byte[255];
--content--
  public TraceSettings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** EngineeringMode Tracing */
public static class EngineeringMode_Tracing {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(EngineeringMode_Tracing) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(EngineeringMode_Tracing) 
    
     private static int SIZE = 0;
    private static final int Offset$Tracing_Active = SIZE  += 1;
    
    }// tplMakeInitializer(EngineeringMode_Tracing) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( EngineeringMode_Tracing other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Tracing_Active = new  byte[1];
--content--
  public EngineeringMode_Tracing( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** EngineeringMode Root */
public static class EngineeringMode_Root {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(EngineeringMode_Root) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(EngineeringMode_Root) 
    
     private static int SIZE = 0;
    private static final int Offset$Root_Active = SIZE  += 1;
    
    }// tplMakeInitializer(EngineeringMode_Root) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( EngineeringMode_Root other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Root_Active = new  byte[1];
--content--
  public EngineeringMode_Root( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** EngineeringMode Fuse */
public static class EngineeringMode_Fuse {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(EngineeringMode_Fuse) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(EngineeringMode_Fuse) 
    
     private static int SIZE = 0;
    private static final int Offset$FuseLevel = SIZE  += 1;
    
    }// tplMakeInitializer(EngineeringMode_Fuse) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( EngineeringMode_Fuse other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] FuseLevel = new  byte[1];
--content--
  public EngineeringMode_Fuse( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** HU Connectivity Settings */
public static class HU_Connectivity_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(HU_Connectivity_Settings) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(HU_Connectivity_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$roamingIndicationViaWcc = SIZE  += 1;
    
    }// tplMakeInitializer(HU_Connectivity_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( HU_Connectivity_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] roamingIndicationViaWcc = new  byte[1];
--content--
  public HU_Connectivity_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Mobile Network Settings */
public static class Mobile_Network_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Mobile_Network_Settings) 
    private final byte[] _buffer = new byte[+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Mobile_Network_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$REJ_SimResetCntMax = SIZE  += 1;
    private static final int Offset$REJ_Timer = SIZE  += 1;
    private static final int Offset$Network_REJ_Enable = SIZE  += 1;
    
    }// tplMakeInitializer(Mobile_Network_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 180 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Mobile_Network_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] REJ_SimResetCntMax = new  byte[1];
 DO  final byte[] REJ_Timer = new  byte[1];
 DO  final byte[] Network_REJ_Enable = new  byte[1];
--content--
  public Mobile_Network_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RemoteHuUserData Counter */
public static class RemoteHuUserData_Counter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RemoteHuUserData_Counter) 
    private final byte[] _buffer = new byte[+255+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RemoteHuUserData_Counter) 
    
     private static int SIZE = 0;
    private static final int Offset$RequestsWhileThisStandingPhase = SIZE  += 255;
    private static final int Offset$RequestsWhileThisStandingPhaseUserData = SIZE  += 255;
    private static final int Offset$RequestsWhileThisStandingPhasePushNotification = SIZE  += 255;
    private static final int Offset$RequestsWhileThisStandingPhaseSoftwareUpdate = SIZE  += 255;
    
    }// tplMakeInitializer(RemoteHuUserData_Counter) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RemoteHuUserData_Counter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RequestsWhileThisStandingPhase = new  byte[255];
 DO  final byte[] RequestsWhileThisStandingPhaseUserData = new  byte[255];
 DO  final byte[] RequestsWhileThisStandingPhasePushNotification = new  byte[255];
 DO  final byte[] RequestsWhileThisStandingPhaseSoftwareUpdate = new  byte[255];
--content--
  public RemoteHuUserData_Counter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RemoteHuUserData Timer */
public static class RemoteHuUserData_Timer {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RemoteHuUserData_Timer) 
    private final byte[] _buffer = new byte[+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RemoteHuUserData_Timer) 
    
     private static int SIZE = 0;
    private static final int Offset$DataPrepareForCommandTimer = SIZE  += 1;
    private static final int Offset$DataDeliverCommandTimer = SIZE  += 1;
    private static final int Offset$UpdateDeliverCommandTimer = SIZE  += 1;
    private static final int Offset$PushNotificationCommandTimer = SIZE  += 1;
    
    }// tplMakeInitializer(RemoteHuUserData_Timer) 
    
    {
        int currentOffset = 0;
        copyTo( 15 );
        currentOffset += 1;
      
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 15 );
        currentOffset += 1;
      
        copyTo( 15 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RemoteHuUserData_Timer other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DataPrepareForCommandTimer = new  byte[1];
 DO  final byte[] DataDeliverCommandTimer = new  byte[1];
 DO  final byte[] UpdateDeliverCommandTimer = new  byte[1];
 DO  final byte[] PushNotificationCommandTimer = new  byte[1];
--content--
  public RemoteHuUserData_Timer( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECall Settings */
public static class ECall_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECall_Settings) 
    private final byte[] _buffer = new byte[+1+20+20+1+1+1+20+20+1+1+1+20+20+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECall_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$ECallVariant = SIZE  += 1;
    private static final int Offset$PrimaryAECall = SIZE  += 20;
    private static final int Offset$PrimaryMECall = SIZE  += 20;
    private static final int Offset$PrimaryEcallInbandData = SIZE  += 1;
    private static final int Offset$PrimaryEcallSmsTransmission = SIZE  += 1;
    private static final int Offset$PrimaryECallSIPHeaderTransmission = SIZE  += 1;
    private static final int Offset$SecondaryAECall = SIZE  += 20;
    private static final int Offset$SecondaryMECall = SIZE  += 20;
    private static final int Offset$SecondaryEcallInbandData = SIZE  += 1;
    private static final int Offset$SecondaryEcallSmsTransmission = SIZE  += 1;
    private static final int Offset$SecondaryECallSIPHeaderTransmission = SIZE  += 1;
    private static final int Offset$ECallTestNumber = SIZE  += 20;
    private static final int Offset$ECallsmsTestDestination = SIZE  += 20;
    private static final int Offset$AECallAllowedAtIgnitionOff = SIZE  += 1;
    private static final int Offset$ECallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ECallMuteDuration = SIZE  += 1;
    private static final int Offset$ECallDelayTimer = SIZE  += 1;
    private static final int Offset$ECallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$ECallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$ECallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ECallKeyLockTimerManualEcall = SIZE  += 1;
    
    }// tplMakeInitializer(ECall_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 60 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECall_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ECallVariant = new  byte[1];
 DO  final byte[] PrimaryAECall = new  byte[20];
 DO  final byte[] PrimaryMECall = new  byte[20];
 DO  final byte[] PrimaryEcallInbandData = new  byte[1];
 DO  final byte[] PrimaryEcallSmsTransmission = new  byte[1];
 DO  final byte[] PrimaryECallSIPHeaderTransmission = new  byte[1];
 DO  final byte[] SecondaryAECall = new  byte[20];
 DO  final byte[] SecondaryMECall = new  byte[20];
 DO  final byte[] SecondaryEcallInbandData = new  byte[1];
 DO  final byte[] SecondaryEcallSmsTransmission = new  byte[1];
 DO  final byte[] SecondaryECallSIPHeaderTransmission = new  byte[1];
 DO  final byte[] ECallTestNumber = new  byte[20];
 DO  final byte[] ECallsmsTestDestination = new  byte[20];
 DO  final byte[] AECallAllowedAtIgnitionOff = new  byte[1];
 DO  final byte[] ECallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ECallMuteDuration = new  byte[1];
 DO  final byte[] ECallDelayTimer = new  byte[1];
 DO  final byte[] ECallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] ECallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] ECallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ECallKeyLockTimerManualEcall = new  byte[1];
--content--
  public ECall_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU Outputs */
public static class TCU_Outputs {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Outputs) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Outputs) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(TCU_Outputs) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Outputs other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public TCU_Outputs( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Force_Network_Generation */
public static class Force_Network_Generation {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Force_Network_Generation) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Force_Network_Generation) 
    
     private static int SIZE = 0;
    private static final int Offset$Used_Network = SIZE  += 1;
    
    }// tplMakeInitializer(Force_Network_Generation) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Force_Network_Generation other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Used_Network = new  byte[1];
--content--
  public Force_Network_Generation( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECall MSDs */
public static class ECall_MSDs {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECall_MSDs) 
    private final byte[] _buffer = new byte[+156+156+156+156+156+156];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECall_MSDs) 
    
     private static int SIZE = 0;
    private static final int Offset$Last_created_MSD = SIZE  += 156;
    private static final int Offset$Unsent_MSD_1 = SIZE  += 156;
    private static final int Offset$Unsent_MSD_2 = SIZE  += 156;
    private static final int Offset$Unsent_MSD_3 = SIZE  += 156;
    private static final int Offset$Unsent_MSD_4 = SIZE  += 156;
    private static final int Offset$Unsent_MSD_5 = SIZE  += 156;
    
    }// tplMakeInitializer(ECall_MSDs) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 156;
      
        // Empty.
        currentOffset += 156;
      
        // Empty.
        currentOffset += 156;
      
        // Empty.
        currentOffset += 156;
      
        // Empty.
        currentOffset += 156;
      
        // Empty.
        currentOffset += 156;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECall_MSDs other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Last_created_MSD = new  byte[156];
 DO  final byte[] Unsent_MSD_1 = new  byte[156];
 DO  final byte[] Unsent_MSD_2 = new  byte[156];
 DO  final byte[] Unsent_MSD_3 = new  byte[156];
 DO  final byte[] Unsent_MSD_4 = new  byte[156];
 DO  final byte[] Unsent_MSD_5 = new  byte[156];
--content--
  public ECall_MSDs( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ECall Al Ack Log */
public static class ECall_Al_Ack_Log {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ECall_Al_Ack_Log) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ECall_Al_Ack_Log) 
    
     private static int SIZE = 0;
    private static final int Offset$ECall_Al_Ack_Log = SIZE  += 4000;
    
    }// tplMakeInitializer(ECall_Al_Ack_Log) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ECall_Al_Ack_Log other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ECall_Al_Ack_Log = new  byte[4000];
--content--
  public ECall_Al_Ack_Log( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_RootCert */
public static class Cathi_RootCert {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_RootCert) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_RootCert) 
    
     private static int SIZE = 0;
    private static final int Offset$RootCert = SIZE  += 4000;
    
    }// tplMakeInitializer(Cathi_RootCert) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_RootCert other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RootCert = new  byte[4000];
--content--
  public Cathi_RootCert( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_InitCert */
public static class Cathi_InitCert {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_InitCert) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_InitCert) 
    
     private static int SIZE = 0;
    private static final int Offset$InitCert = SIZE  += 4000;
    
    }// tplMakeInitializer(Cathi_InitCert) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_InitCert other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] InitCert = new  byte[4000];
--content--
  public Cathi_InitCert( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_currentTLSCert */
public static class Cathi_currentTLSCert {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_currentTLSCert) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_currentTLSCert) 
    
     private static int SIZE = 0;
    private static final int Offset$CurrentTLSCert = SIZE  += 4000;
    
    }// tplMakeInitializer(Cathi_currentTLSCert) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_currentTLSCert other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] CurrentTLSCert = new  byte[4000];
--content--
  public Cathi_currentTLSCert( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_EndRootCert */
public static class Cathi_EndRootCert {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_EndRootCert) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_EndRootCert) 
    
     private static int SIZE = 0;
    private static final int Offset$EndRootCert = SIZE  += 4000;
    
    }// tplMakeInitializer(Cathi_EndRootCert) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_EndRootCert other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] EndRootCert = new  byte[4000];
--content--
  public Cathi_EndRootCert( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_IndCert */
public static class Cathi_IndCert {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_IndCert) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_IndCert) 
    
     private static int SIZE = 0;
    private static final int Offset$IndCert = SIZE  += 4000;
    
    }// tplMakeInitializer(Cathi_IndCert) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_IndCert other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] IndCert = new  byte[4000];
--content--
  public Cathi_IndCert( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_SMSKey */
public static class Cathi_SMSKey {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_SMSKey) 
    private final byte[] _buffer = new byte[+1024+15];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_SMSKey) 
    
     private static int SIZE = 0;
    private static final int Offset$SMSKeyEncrPub = SIZE  += 1024;
    private static final int Offset$SMSKeyCreationTime = SIZE  += 15;
    
    }// tplMakeInitializer(Cathi_SMSKey) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1024;
      
        // Empty.
        currentOffset += 15;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_SMSKey other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SMSKeyEncrPub = new  byte[1024];
 DO  final byte[] SMSKeyCreationTime = new  byte[15];
--content--
  public Cathi_SMSKey( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cathi_AMTCallCounter */
public static class Cathi_AMTCallCounter {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cathi_AMTCallCounter) 
    private final byte[] _buffer = new byte[+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cathi_AMTCallCounter) 
    
     private static int SIZE = 0;
    private static final int Offset$globalCAthiAMTCallCounter = SIZE  += 255;
    
    }// tplMakeInitializer(Cathi_AMTCallCounter) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cathi_AMTCallCounter other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] globalCAthiAMTCallCounter = new  byte[255];
--content--
  public Cathi_AMTCallCounter( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ComStack RootConfiguration */
public static class ComStack_RootConfiguration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ComStack_RootConfiguration) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ComStack_RootConfiguration) 
    
     private static int SIZE = 0;
    private static final int Offset$ComStack_RootConfiguration = SIZE  += 4000;
    
    }// tplMakeInitializer(ComStack_RootConfiguration) 
    
    {
        int currentOffset = 0;
        copyTo( 31,139,8,0,0,0,0,0,0,0,205,149,221,110,155,48,0,70,223,133,235,98,194,218,74,105,238,24,137,218,168,33,97,36,217,45,114,141,75,172,26,27,97,23,41,170,242,238,53,89,86,170,98,242,99,168,182,59,108,248,14,96,251,232,123,179,16,103,18,18,134,139,57,204,176,53,178,124,158,101,75,9,209,75,28,113,46,125,206,158,73,106,93,213,143,69,152,98,40,170,39,93,112,167,110,36,80,170,161,172,167,7,224,230,48,109,141,222,44,127,30,135,209,98,188,191,244,86,15,211,120,202,136,244,113,33,171,25,5,101,24,73,194,153,202,109,164,204,197,200,113,16,148,27,2,16,3,73,249,4,16,47,114,194,36,46,0,195,210,33,42,107,237,174,14,36,159,18,204,140,89,168,202,213,44,53,138,112,201,85,96,79,184,156,151,98,137,10,90,19,151,193,242,17,111,91,73,226,69,232,57,175,57,229,48,169,56,139,192,27,7,173,128,2,102,2,11,187,16,137,158,35,182,12,101,212,78,178,253,39,125,108,234,97,67,91,127,16,229,122,156,68,175,54,218,103,157,210,117,74,188,33,136,98,225,252,153,170,94,17,252,90,173,226,135,6,88,8,170,176,106,159,138,173,93,194,220,222,104,241,163,225,112,120,253,65,153,157,162,28,103,204,87,97,188,142,102,113,224,77,231,13,210,0,72,146,97,45,224,115,246,167,231,63,174,195,70,218,61,158,158,45,238,227,117,56,91,120,227,10,114,106,235,40,79,83,194,82,253,122,31,110,58,2,51,117,24,20,123,60,249,125,169,68,182,196,66,246,166,81,27,205,92,164,54,226,229,42,181,145,12,100,234,203,36,119,120,11,110,129,59,184,6,63,6,14,204,137,168,220,50,113,231,51,232,60,79,190,38,110,206,181,162,131,18,93,124,104,46,213,223,211,175,150,171,160,162,150,192,11,188,208,172,79,96,214,95,159,104,89,29,250,68,203,51,232,19,45,199,64,1,45,199,188,79,180,184,254,250,68,135,191,180,79,142,50,206,49,71,7,56,95,158,182,180,89,159,104,215,187,209,39,19,127,98,102,82,111,26,245,234,80,47,2,253,87,5,82,169,243,157,222,116,150,166,155,49,255,168,107,190,184,114,82,148,221,238,29,185,18,25,216,35,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ComStack_RootConfiguration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ComStack_RootConfiguration = new  byte[4000];
--content--
  public ComStack_RootConfiguration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RemoteHU Settings */
public static class RemoteHU_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RemoteHU_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RemoteHU_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$MaxRequestsPerStandingPhaseUseOneCombinedCounterForAllFeatures = SIZE  += 1;
    private static final int Offset$MaxRequestsPerStandingPhaseCombined = SIZE  += 1;
    private static final int Offset$MaxRequestsPerStandingPhaseUserData = SIZE  += 1;
    private static final int Offset$MaxRequestsPerStandingPhasePushNotification = SIZE  += 1;
    private static final int Offset$MaxRequestsPerStandingPhaseRemoteSoftwareUpdate = SIZE  += 1;
    
    }// tplMakeInitializer(RemoteHU_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RemoteHU_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] MaxRequestsPerStandingPhaseUseOneCombinedCounterForAllFeatures = new  byte[1];
 DO  final byte[] MaxRequestsPerStandingPhaseCombined = new  byte[1];
 DO  final byte[] MaxRequestsPerStandingPhaseUserData = new  byte[1];
 DO  final byte[] MaxRequestsPerStandingPhasePushNotification = new  byte[1];
 DO  final byte[] MaxRequestsPerStandingPhaseRemoteSoftwareUpdate = new  byte[1];
--content--
  public RemoteHU_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Maintenance Management Weighting Factors */
public static class Maintenance_Management_Weighting_Factors {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Maintenance_Management_Weighting_Factors) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Maintenance_Management_Weighting_Factors) 
    
     private static int SIZE = 0;
    private static final int Offset$numeratorWeightingFactor = SIZE  += 1;
    private static final int Offset$divisorWeightingFactor = SIZE  += 1;
    
    }// tplMakeInitializer(Maintenance_Management_Weighting_Factors) 
    
    {
        int currentOffset = 0;
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 10 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Maintenance_Management_Weighting_Factors other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] numeratorWeightingFactor = new  byte[1];
 DO  final byte[] divisorWeightingFactor = new  byte[1];
--content--
  public Maintenance_Management_Weighting_Factors( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** System_Time_Unix */
public static class System_Time_Unix {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(System_Time_Unix) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(System_Time_Unix) 
    
     private static int SIZE = 0;
    private static final int Offset$UTC_Unix_Time_Stamp_Format = SIZE  += 1;
    
    }// tplMakeInitializer(System_Time_Unix) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( System_Time_Unix other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] UTC_Unix_Time_Stamp_Format = new  byte[1];
--content--
  public System_Time_Unix( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Independent_car_heating_settings */
public static class Independent_car_heating_settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Independent_car_heating_settings) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Independent_car_heating_settings) 
    
     private static int SIZE = 0;
    private static final int Offset$ichWakeDelayTimer = SIZE  += 1;
    private static final int Offset$ichSyncDelayTimer = SIZE  += 1;
    
    }// tplMakeInitializer(Independent_car_heating_settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 20 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Independent_car_heating_settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ichWakeDelayTimer = new  byte[1];
 DO  final byte[] ichSyncDelayTimer = new  byte[1];
--content--
  public Independent_car_heating_settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Customer Settings */
public static class Customer_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Customer_Settings) 
    private final byte[] _buffer = new byte[+4092];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Customer_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$Customer_Settings = SIZE  += 4092;
    
    }// tplMakeInitializer(Customer_Settings) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4092;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Customer_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Customer_Settings = new  byte[4092];
--content--
  public Customer_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** FastpathTopicTree */
public static class FastpathTopicTree {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(FastpathTopicTree) 
    private final byte[] _buffer = new byte[+800];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(FastpathTopicTree) 
    
     private static int SIZE = 0;
    private static final int Offset$fastpathTopicTree = SIZE  += 800;
    
    }// tplMakeInitializer(FastpathTopicTree) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 800;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( FastpathTopicTree other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] fastpathTopicTree = new  byte[800];
--content--
  public FastpathTopicTree( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Fastpath_settings */
public static class Fastpath_settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Fastpath_settings) 
    private final byte[] _buffer = new byte[+101+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Fastpath_settings) 
    
     private static int SIZE = 0;
    private static final int Offset$fastpathHostAddress = SIZE  += 101;
    private static final int Offset$fastpathKeepAliveInterval = SIZE  += 1;
    
    }// tplMakeInitializer(Fastpath_settings) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 90 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Fastpath_settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] fastpathHostAddress = new  byte[101];
 DO  final byte[] fastpathKeepAliveInterval = new  byte[1];
--content--
  public Fastpath_settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** CEP_URL */
public static class CEP_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(CEP_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(CEP_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$CATHIServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(CEP_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( CEP_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] CATHIServerUrl = new  byte[101];
--content--
  public CEP_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** APN_Names */
public static class APN_Names {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(APN_Names) 
    private final byte[] _buffer = new byte[+101+101+101+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(APN_Names) 
    
     private static int SIZE = 0;
    private static final int Offset$IMS = SIZE  += 101;
    private static final int Offset$HOS = SIZE  += 101;
    private static final int Offset$B2B = SIZE  += 101;
    private static final int Offset$B2C = SIZE  += 101;
    
    }// tplMakeInitializer(APN_Names) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( APN_Names other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] IMS = new  byte[101];
 DO  final byte[] HOS = new  byte[101];
 DO  final byte[] B2B = new  byte[101];
 DO  final byte[] B2C = new  byte[101];
--content--
  public APN_Names( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RCS_URL */
public static class RCS_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RCS_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RCS_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$rcsServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(RCS_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RCS_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] rcsServerUrl = new  byte[101];
--content--
  public RCS_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SMS_Destinations */
public static class SMS_Destinations {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SMS_Destinations) 
    private final byte[] _buffer = new byte[+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SMS_Destinations) 
    
     private static int SIZE = 0;
    private static final int Offset$smsDestinationEcall = SIZE  += 20;
    private static final int Offset$smsDestination = SIZE  += 20;
    
    }// tplMakeInitializer(SMS_Destinations) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SMS_Destinations other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] smsDestinationEcall = new  byte[20];
 DO  final byte[] smsDestination = new  byte[20];
--content--
  public SMS_Destinations( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ATP_URL */
public static class ATP_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ATP_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ATP_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$atpServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(ATP_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ATP_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] atpServerUrl = new  byte[101];
--content--
  public ATP_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** OMA_DM_Server_URL */
public static class OMA_DM_Server_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(OMA_DM_Server_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(OMA_DM_Server_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$omadmServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(OMA_DM_Server_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( OMA_DM_Server_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] omadmServerUrl = new  byte[101];
--content--
  public OMA_DM_Server_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** IP_Addresses */
public static class IP_Addresses {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(IP_Addresses) 
    private final byte[] _buffer = new byte[+15+39+15+39+15+39+15+39];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(IP_Addresses) 
    
     private static int SIZE = 0;
    private static final int Offset$IPv4_Address_IMSApn = SIZE  += 15;
    private static final int Offset$IPv6_Address_IMSApn = SIZE  += 39;
    private static final int Offset$IPv4_Address_HOSApn = SIZE  += 15;
    private static final int Offset$IPv6_Address_HOSApn = SIZE  += 39;
    private static final int Offset$IPv4_Address_B2BApn = SIZE  += 15;
    private static final int Offset$IPv6_Address_B2BApn = SIZE  += 39;
    private static final int Offset$IPv4_Address_B2CApn = SIZE  += 15;
    private static final int Offset$IPv6_Address_B2CApn = SIZE  += 39;
    
    }// tplMakeInitializer(IP_Addresses) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 39;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 39;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 39;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 39;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( IP_Addresses other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] IPv4_Address_IMSApn = new  byte[15];
 DO  final byte[] IPv6_Address_IMSApn = new  byte[39];
 DO  final byte[] IPv4_Address_HOSApn = new  byte[15];
 DO  final byte[] IPv6_Address_HOSApn = new  byte[39];
 DO  final byte[] IPv4_Address_B2BApn = new  byte[15];
 DO  final byte[] IPv6_Address_B2BApn = new  byte[39];
 DO  final byte[] IPv4_Address_B2CApn = new  byte[15];
 DO  final byte[] IPv6_Address_B2CApn = new  byte[39];
--content--
  public IP_Addresses( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Active_Sim_Profile_Data */
public static class Active_Sim_Profile_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Active_Sim_Profile_Data) 
    private final byte[] _buffer = new byte[+20+20+101+101+101+101+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Active_Sim_Profile_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$smsDestinationEcall = SIZE  += 20;
    private static final int Offset$smsDestination = SIZE  += 20;
    private static final int Offset$IMS = SIZE  += 101;
    private static final int Offset$HOS = SIZE  += 101;
    private static final int Offset$B2B = SIZE  += 101;
    private static final int Offset$B2C = SIZE  += 101;
    private static final int Offset$IP_Version = SIZE  += 1;
    private static final int Offset$MTU_size = SIZE  += 1;
    
    }// tplMakeInitializer(Active_Sim_Profile_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 20;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Active_Sim_Profile_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] smsDestinationEcall = new  byte[20];
 DO  final byte[] smsDestination = new  byte[20];
 DO  final byte[] IMS = new  byte[101];
 DO  final byte[] HOS = new  byte[101];
 DO  final byte[] B2B = new  byte[101];
 DO  final byte[] B2C = new  byte[101];
 DO  final byte[] IP_Version = new  byte[1];
 DO  final byte[] MTU_size = new  byte[1];
--content--
  public Active_Sim_Profile_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Numbers_Active_Profile */
public static class Cellular_Network_Numbers_Active_Profile {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Numbers_Active_Profile) 
    private final byte[] _buffer = new byte[+32+22+16+15+15];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Numbers_Active_Profile) 
    
     private static int SIZE = 0;
    private static final int Offset$eUICCID = SIZE  += 32;
    private static final int Offset$ICCID = SIZE  += 22;
    private static final int Offset$IMEI_MEID = SIZE  += 16;
    private static final int Offset$IMSI_MIN = SIZE  += 15;
    private static final int Offset$MSISDN_MDN = SIZE  += 15;
    
    }// tplMakeInitializer(Cellular_Network_Numbers_Active_Profile) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 32;
      
        // Empty.
        currentOffset += 22;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Numbers_Active_Profile other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] eUICCID = new  byte[32];
 DO  final byte[] ICCID = new  byte[22];
 DO  final byte[] IMEI_MEID = new  byte[16];
 DO  final byte[] IMSI_MIN = new  byte[15];
 DO  final byte[] MSISDN_MDN = new  byte[15];
--content--
  public Cellular_Network_Numbers_Active_Profile( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Numbers_Provisioning_Profile */
public static class Cellular_Network_Numbers_Provisioning_Profile {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Numbers_Provisioning_Profile) 
    private final byte[] _buffer = new byte[+32+22+16+15+15+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Numbers_Provisioning_Profile) 
    
     private static int SIZE = 0;
    private static final int Offset$eUICCID = SIZE  += 32;
    private static final int Offset$ICCID = SIZE  += 22;
    private static final int Offset$IMEI_MEID = SIZE  += 16;
    private static final int Offset$IMSI_MIN = SIZE  += 15;
    private static final int Offset$MSISDN_MDN = SIZE  += 15;
    private static final int Offset$Life_Cycle_State = SIZE  += 1;
    
    }// tplMakeInitializer(Cellular_Network_Numbers_Provisioning_Profile) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 32;
      
        // Empty.
        currentOffset += 22;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Numbers_Provisioning_Profile other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] eUICCID = new  byte[32];
 DO  final byte[] ICCID = new  byte[22];
 DO  final byte[] IMEI_MEID = new  byte[16];
 DO  final byte[] IMSI_MIN = new  byte[15];
 DO  final byte[] MSISDN_MDN = new  byte[15];
 DO  final byte[] Life_Cycle_State = new  byte[1];
--content--
  public Cellular_Network_Numbers_Provisioning_Profile( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cellular_Network_Numbers_Emergency_Profile */
public static class Cellular_Network_Numbers_Emergency_Profile {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cellular_Network_Numbers_Emergency_Profile) 
    private final byte[] _buffer = new byte[+32+22+16+15+15+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cellular_Network_Numbers_Emergency_Profile) 
    
     private static int SIZE = 0;
    private static final int Offset$eUICCID = SIZE  += 32;
    private static final int Offset$ICCID = SIZE  += 22;
    private static final int Offset$IMEI_MEID = SIZE  += 16;
    private static final int Offset$IMSI_MIN = SIZE  += 15;
    private static final int Offset$MSISDN_MDN = SIZE  += 15;
    private static final int Offset$Life_Cycle_State = SIZE  += 1;
    
    }// tplMakeInitializer(Cellular_Network_Numbers_Emergency_Profile) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 32;
      
        // Empty.
        currentOffset += 22;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 15;
      
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cellular_Network_Numbers_Emergency_Profile other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] eUICCID = new  byte[32];
 DO  final byte[] ICCID = new  byte[22];
 DO  final byte[] IMEI_MEID = new  byte[16];
 DO  final byte[] IMSI_MIN = new  byte[15];
 DO  final byte[] MSISDN_MDN = new  byte[15];
 DO  final byte[] Life_Cycle_State = new  byte[1];
--content--
  public Cellular_Network_Numbers_Emergency_Profile( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cebas_ECU_List */
public static class Cebas_ECU_List {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cebas_ECU_List) 
    private final byte[] _buffer = new byte[+3000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cebas_ECU_List) 
    
     private static int SIZE = 0;
    private static final int Offset$ECU_List = SIZE  += 3000;
    
    }// tplMakeInitializer(Cebas_ECU_List) 
    
    {
        int currentOffset = 0;
        copyTo
        currentOffset += 3000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cebas_ECU_List other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ECU_List = new  byte[3000];
--content--
  public Cebas_ECU_List( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cebas_Nonce_Value */
public static class Cebas_Nonce_Value {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cebas_Nonce_Value) 
    private final byte[] _buffer = new byte[+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cebas_Nonce_Value) 
    
     private static int SIZE = 0;
    private static final int Offset$Nonce_Value = SIZE  += 64;
    
    }// tplMakeInitializer(Cebas_Nonce_Value) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cebas_Nonce_Value other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Nonce_Value = new  byte[64];
--content--
  public Cebas_Nonce_Value( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cebas_Signature */
public static class Cebas_Signature {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cebas_Signature) 
    private final byte[] _buffer = new byte[+512];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cebas_Signature) 
    
     private static int SIZE = 0;
    private static final int Offset$Cebas_Signature = SIZE  += 512;
    
    }// tplMakeInitializer(Cebas_Signature) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 512;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cebas_Signature other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Cebas_Signature = new  byte[512];
--content--
  public Cebas_Signature( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Cebas_Certificate_Setting */
public static class Cebas_Certificate_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Cebas_Certificate_Setting) 
    private final byte[] _buffer = new byte[+1+1+32+32+1+1+1+32+4+1+1+32+4+1+4+32];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Cebas_Certificate_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$Cert_X509_Version = SIZE  += 1;
    private static final int Offset$Cert_EnhancedRights_Version = SIZE  += 1;
    private static final int Offset$Algo_Encryption_Identifier = SIZE  += 32;
    private static final int Offset$Algo_Signatur_Identifier = SIZE  += 32;
    private static final int Offset$Qualifier_Production = SIZE  += 1;
    private static final int Offset$Update_Certificate_Role_PKI_AS_Enhanced = SIZE  += 1;
    private static final int Offset$Update_Certificate_Role_User_AS_Enhanced = SIZE  += 1;
    private static final int Offset$Update_Certificate_CN_AS_Enhanced = SIZE  += 32;
    private static final int Offset$Update_Certificate_Schedule_VINBC = SIZE  += 4;
    private static final int Offset$Diagnose_Certificate_Role_PKI_Diag = SIZE  += 1;
    private static final int Offset$Diagnose_Certificate_Role_User_Diag = SIZE  += 1;
    private static final int Offset$Diagnose_Certificate_CN_Diag = SIZE  += 32;
    private static final int Offset$Diagnose_Certificate_Schedule_Diag = SIZE  += 4;
    private static final int Offset$Enhanced_Rights_Certificate_Role_PKI_EnhancedRights = SIZE  += 1;
    private static final int Offset$Enhanced_Rights_Certificate_Schedule_EnhancedRights = SIZE  += 4;
    private static final int Offset$Enhanced_Rights_Certificate_CN_Enhanced_Rights = SIZE  += 32;
    
    }// tplMakeInitializer(Cebas_Certificate_Setting) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 69,100,50,53,53,49,57,112,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 32;
      
        copyTo( 69,100,50,53,53,49,57,112,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 32;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 82,101,109,111,116,101,85,112,100,97,116,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 32;
      
        copyTo( 0,8,5,32 );
        currentOffset += 4;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 7 );
        currentOffset += 1;
      
        copyTo( 82,101,109,111,116,101,68,105,97,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 32;
      
        copyTo( 0,8,5,32 );
        currentOffset += 4;
      
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 0,8,5,32 );
        currentOffset += 4;
      
        copyTo( 69,110,104,97,110,99,101,100,82,105,103,104,116,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 32;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Cebas_Certificate_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Cert_X509_Version = new  byte[1];
 DO  final byte[] Cert_EnhancedRights_Version = new  byte[1];
 DO  final byte[] Algo_Encryption_Identifier = new  byte[32];
 DO  final byte[] Algo_Signatur_Identifier = new  byte[32];
 DO  final byte[] Qualifier_Production = new  byte[1];
 DO  final byte[] Update_Certificate_Role_PKI_AS_Enhanced = new  byte[1];
 DO  final byte[] Update_Certificate_Role_User_AS_Enhanced = new  byte[1];
 DO  final byte[] Update_Certificate_CN_AS_Enhanced = new  byte[32];
 DO  final byte[] Update_Certificate_Schedule_VINBC = new  byte[4];
 DO  final byte[] Diagnose_Certificate_Role_PKI_Diag = new  byte[1];
 DO  final byte[] Diagnose_Certificate_Role_User_Diag = new  byte[1];
 DO  final byte[] Diagnose_Certificate_CN_Diag = new  byte[32];
 DO  final byte[] Diagnose_Certificate_Schedule_Diag = new  byte[4];
 DO  final byte[] Enhanced_Rights_Certificate_Role_PKI_EnhancedRights = new  byte[1];
 DO  final byte[] Enhanced_Rights_Certificate_Schedule_EnhancedRights = new  byte[4];
 DO  final byte[] Enhanced_Rights_Certificate_CN_Enhanced_Rights = new  byte[32];
--content--
  public Cebas_Certificate_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ComStack Configuration */
public static class ComStack_Configuration_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ComStack_Configuration_1) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ComStack_Configuration_1) 
    
     private static int SIZE = 0;
    private static final int Offset$ComStack_Configuration = SIZE  += 4000;
    
    }// tplMakeInitializer(ComStack_Configuration_1) 
    
    {
        int currentOffset = 0;
        copyTo( 31,139,8,0,0,0,0,0,0,0,157,148,93,111,218,48,20,134,255,138,229,237,110,208,124,64,129,114,71,9,93,171,149,53,75,2,55,85,21,185,193,41,214,66,146,217,134,13,33,254,251,142,243,49,210,22,66,58,1,82,98,206,57,239,121,143,31,123,135,131,36,150,132,197,148,127,39,43,138,135,120,156,172,86,174,36,193,79,223,165,82,178,248,69,224,214,33,200,161,17,37,66,197,153,23,125,248,99,65,36,188,202,195,178,254,111,25,15,119,120,67,56,35,207,17,21,234,37,229,52,100,127,32,198,208,117,188,111,97,22,11,73,226,32,255,115,250,195,243,252,123,245,4,139,146,218,68,46,33,114,151,231,236,181,187,56,212,118,107,182,216,107,227,36,214,160,63,85,32,203,185,253,72,14,36,69,73,64,100,194,51,81,119,234,250,22,13,201,58,2,7,1,101,27,170,86,203,190,160,22,4,40,161,74,156,75,227,197,241,160,220,65,125,189,194,101,11,167,111,122,245,146,185,246,165,232,246,211,251,106,71,84,79,150,186,225,243,162,208,97,70,13,186,186,109,220,213,237,185,174,142,149,58,210,213,189,239,116,29,255,235,216,242,133,228,148,172,84,169,207,11,42,2,200,243,150,20,21,59,133,66,248,165,137,64,10,42,148,135,34,158,27,89,160,144,39,43,100,17,54,191,190,64,222,146,9,4,95,18,72,182,1,32,22,232,121,139,108,107,134,30,205,203,241,68,215,117,99,249,132,91,141,134,232,242,141,182,83,212,211,88,122,219,148,238,181,171,94,127,160,233,90,199,236,247,6,144,80,106,60,196,32,160,142,67,161,144,49,6,221,109,240,240,241,96,167,221,70,224,21,13,145,253,224,34,55,183,80,236,5,74,121,18,178,136,162,118,27,87,233,124,60,49,164,39,165,29,208,84,102,2,43,42,4,121,81,71,8,94,42,253,226,161,209,194,130,193,246,96,213,184,114,157,189,232,234,48,103,79,185,145,61,148,251,77,126,210,117,58,167,75,22,68,144,24,146,72,80,56,194,76,4,132,171,200,56,129,164,21,236,55,11,136,0,89,201,215,116,255,180,111,29,177,87,128,209,216,219,27,44,107,188,149,82,215,112,51,1,118,190,157,136,120,156,112,238,95,175,185,144,22,160,225,187,94,39,223,233,65,185,211,31,30,200,21,174,218,42,181,166,36,205,4,60,176,82,170,88,93,80,209,107,85,6,221,211,99,175,168,76,238,252,41,29,147,40,2,29,22,203,135,48,132,11,213,119,126,229,74,29,67,31,129,146,89,163,100,152,151,151,39,164,250,250,43,41,103,177,117,38,83,127,60,243,237,145,243,205,31,205,237,92,164,219,187,50,207,12,205,24,232,189,94,163,169,85,68,64,195,177,71,175,52,106,141,156,214,80,70,254,3,213,44,0,88,133,84,145,93,86,199,206,100,9,173,189,126,142,152,88,190,134,54,229,44,225,76,110,213,101,49,177,238,102,83,88,131,147,8,39,255,69,173,89,147,155,209,236,222,171,165,59,187,38,161,131,15,240,60,10,228,230,192,179,94,63,182,130,231,124,86,102,45,193,213,186,147,174,126,230,156,244,245,195,30,24,77,152,21,5,179,166,209,107,200,236,25,82,51,76,129,164,42,169,157,6,164,246,207,243,89,150,174,2,218,105,0,104,255,29,150,240,217,255,5,218,115,13,68,72,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ComStack_Configuration_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ComStack_Configuration = new  byte[4000];
--content--
  public ComStack_Configuration_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** E_Call_Test_Mode_Numbers */
public static class E_Call_Test_Mode_Numbers {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(E_Call_Test_Mode_Numbers) 
    private final byte[] _buffer = new byte[+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(E_Call_Test_Mode_Numbers) 
    
     private static int SIZE = 0;
    private static final int Offset$callTestNumber = SIZE  += 20;
    private static final int Offset$smsTestDestination = SIZE  += 20;
    
    }// tplMakeInitializer(E_Call_Test_Mode_Numbers) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( E_Call_Test_Mode_Numbers other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] callTestNumber = new  byte[20];
 DO  final byte[] smsTestDestination = new  byte[20];
--content--
  public E_Call_Test_Mode_Numbers( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Internal_SW_Versions */
public static class TCU_Internal_SW_Versions {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Internal_SW_Versions) 
    private final byte[] _buffer = new byte[+64+64+64+64+64+64+64+64+64+64+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Internal_SW_Versions) 
    
     private static int SIZE = 0;
    private static final int Offset$VuCBL = SIZE  += 64;
    private static final int Offset$VuCAPP = SIZE  += 64;
    private static final int Offset$VuCOther1 = SIZE  += 64;
    private static final int Offset$VuCOther2 = SIZE  += 64;
    private static final int Offset$SoCBL = SIZE  += 64;
    private static final int Offset$SoCKernel = SIZE  += 64;
    private static final int Offset$SoCSystem = SIZE  += 64;
    private static final int Offset$SoCModem = SIZE  += 64;
    private static final int Offset$SoCeSIMOS = SIZE  += 64;
    private static final int Offset$SoCOther1 = SIZE  += 64;
    private static final int Offset$SoCOther2 = SIZE  += 64;
    
    }// tplMakeInitializer(TCU_Internal_SW_Versions) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Internal_SW_Versions other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] VuCBL = new  byte[64];
 DO  final byte[] VuCAPP = new  byte[64];
 DO  final byte[] VuCOther1 = new  byte[64];
 DO  final byte[] VuCOther2 = new  byte[64];
 DO  final byte[] SoCBL = new  byte[64];
 DO  final byte[] SoCKernel = new  byte[64];
 DO  final byte[] SoCSystem = new  byte[64];
 DO  final byte[] SoCModem = new  byte[64];
 DO  final byte[] SoCeSIMOS = new  byte[64];
 DO  final byte[] SoCOther1 = new  byte[64];
 DO  final byte[] SoCOther2 = new  byte[64];
--content--
  public TCU_Internal_SW_Versions( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle_Configuration */
public static class Vehicle_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Configuration) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$audioParameterSetSelection = SIZE  += 1;
    private static final int Offset$muteLine = SIZE  += 1;
    private static final int Offset$carsharing = SIZE  += 1;
    private static final int Offset$FOTA_RSWDL_Support_1 = SIZE  += 1;
    private static final int Offset$tdpResetProhibition = SIZE  += 1;
    private static final int Offset$GPS_Antenna_Type = SIZE  += 1;
    
    }// tplMakeInitializer(Vehicle_Configuration) 
    
    {
        int currentOffset = 0;
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] audioParameterSetSelection = new  byte[1];
 DO  final byte[] muteLine = new  byte[1];
 DO  final byte[] carsharing = new  byte[1];
 DO  final byte[] FOTA_RSWDL_Support_1 = new  byte[1];
 DO  final byte[] tdpResetProhibition = new  byte[1];
 DO  final byte[] GPS_Antenna_Type = new  byte[1];
--content--
  public Vehicle_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Voice_Call_Execution_Settings */
public static class Voice_Call_Execution_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Voice_Call_Execution_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Voice_Call_Execution_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$voiceCallMuteDuration = SIZE  += 1;
    private static final int Offset$ecallPsapCallingStrategy = SIZE  += 1;
    private static final int Offset$ecallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$ecallSmsTransmission = SIZE  += 1;
    private static final int Offset$ecallInbandDataPush = SIZE  += 1;
    private static final int Offset$ecallDtmfAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallDtmfManualEcall = SIZE  += 1;
    private static final int Offset$ecallDelayTimer = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerManualEcall = SIZE  += 1;
    private static final int Offset$ecallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$eCallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ecallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$scallDppConfirmed = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    
    }// tplMakeInitializer(Voice_Call_Execution_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Voice_Call_Execution_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] voiceCallMuteDuration = new  byte[1];
 DO  final byte[] ecallPsapCallingStrategy = new  byte[1];
 DO  final byte[] ecallAtpDataTransmission = new  byte[1];
 DO  final byte[] ecallSmsTransmission = new  byte[1];
 DO  final byte[] ecallInbandDataPush = new  byte[1];
 DO  final byte[] ecallDtmfAutomaticEcall = new  byte[1];
 DO  final byte[] ecallDtmfManualEcall = new  byte[1];
 DO  final byte[] ecallDelayTimer = new  byte[1];
 DO  final byte[] ecallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ecallKeyLockTimerManualEcall = new  byte[1];
 DO  final byte[] ecallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] eCallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ecallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] scallDppConfirmed = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
--content--
  public Voice_Call_Execution_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** System_Time_Unix */
public static class System_Time_Unix {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(System_Time_Unix) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(System_Time_Unix) 
    
     private static int SIZE = 0;
    private static final int Offset$UTC_Unix_Time_Stamp_Format = SIZE  += 1;
    
    }// tplMakeInitializer(System_Time_Unix) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( System_Time_Unix other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] UTC_Unix_Time_Stamp_Format = new  byte[1];
--content--
  public System_Time_Unix( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Independent_car_heating_settings */
public static class Independent_car_heating_settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Independent_car_heating_settings) 
    private final byte[] _buffer = new byte[+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Independent_car_heating_settings) 
    
     private static int SIZE = 0;
    private static final int Offset$ichWakeDelayTimer = SIZE  += 1;
    private static final int Offset$ichSyncDelayTimer = SIZE  += 1;
    
    }// tplMakeInitializer(Independent_car_heating_settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 20 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Independent_car_heating_settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ichWakeDelayTimer = new  byte[1];
 DO  final byte[] ichSyncDelayTimer = new  byte[1];
--content--
  public Independent_car_heating_settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Activate SAR Data Storage */
public static class Activate_SAR_Data_Storage {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Activate_SAR_Data_Storage) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Activate_SAR_Data_Storage) 
    
     private static int SIZE = 0;
    private static final int Offset$SAR_Data_Storage_Status = SIZE  += 1;
    
    }// tplMakeInitializer(Activate_SAR_Data_Storage) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Activate_SAR_Data_Storage other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SAR_Data_Storage_Status = new  byte[1];
--content--
  public Activate_SAR_Data_Storage( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Configure SAR Trigger Events */
public static class Configure_SAR_Trigger_Events {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Configure_SAR_Trigger_Events) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Configure_SAR_Trigger_Events) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Configure_SAR_Trigger_Events) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Configure_SAR_Trigger_Events other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Configure_SAR_Trigger_Events( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ComStack Configuration Ramses Var 00 01 */
public static class ComStack_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ComStack_Configuration) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ComStack_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$DID_DataObject = SIZE  += 4000;
    
    }// tplMakeInitializer(ComStack_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ComStack_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] DID_DataObject = new  byte[4000];
--content--
  public ComStack_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MNO Configtable Ramses Var 00 01 */
public static class MNO_Configtable {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MNO_Configtable) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MNO_Configtable) 
    
     private static int SIZE = 0;
    private static final int Offset$MNO_Configtable = SIZE  += 4000;
    
    }// tplMakeInitializer(MNO_Configtable) 
    
    {
        int currentOffset = 0;
        copyTo( 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MNO_Configtable other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] MNO_Configtable = new  byte[4000];
--content--
  public MNO_Configtable( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RemoteDoorAndWindowSettings Ramses Var 00 01 */
public static class RemoteDoorAndWindowSettings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RemoteDoorAndWindowSettings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RemoteDoorAndWindowSettings) 
    
     private static int SIZE = 0;
    private static final int Offset$remoteControllableWindows = SIZE  += 1;
    private static final int Offset$remoteControllableDoors = SIZE  += 1;
    private static final int Offset$VentilateWindowPosition = SIZE  += 1;
    private static final int Offset$CloseWindowPosition = SIZE  += 1;
    private static final int Offset$OpenWindowPosition = SIZE  += 1;
    
    }// tplMakeInitializer(RemoteDoorAndWindowSettings) 
    
    {
        int currentOffset = 0;
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 877 );
        currentOffset += 1;
      
        copyTo( 2047 );
        currentOffset += 1;
      
        copyTo( 3000 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RemoteDoorAndWindowSettings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] remoteControllableWindows = new  byte[1];
 DO  final byte[] remoteControllableDoors = new  byte[1];
 DO  final byte[] VentilateWindowPosition = new  byte[1];
 DO  final byte[] CloseWindowPosition = new  byte[1];
 DO  final byte[] OpenWindowPosition = new  byte[1];
--content--
  public RemoteDoorAndWindowSettings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SalesCountryCode Ramses Var 00 01 */
public static class SalesCountryCode {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SalesCountryCode) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SalesCountryCode) 
    
     private static int SIZE = 0;
    private static final int Offset$salesCountryCode = SIZE  += 1;
    
    }// tplMakeInitializer(SalesCountryCode) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SalesCountryCode other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] salesCountryCode = new  byte[1];
--content--
  public SalesCountryCode( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Stalled Connection Detection Ramses Var 00 01 */
public static class Stalled_Connection_Detection {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Stalled_Connection_Detection) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Stalled_Connection_Detection) 
    
     private static int SIZE = 0;
    private static final int Offset$SCD_RetryCounterMax = SIZE  += 1;
    private static final int Offset$SCD_MonitorTimer = SIZE  += 1;
    private static final int Offset$SCD_APN0_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN1_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN2_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN3_Enable = SIZE  += 1;
    
    }// tplMakeInitializer(Stalled_Connection_Detection) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 30 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Stalled_Connection_Detection other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SCD_RetryCounterMax = new  byte[1];
 DO  final byte[] SCD_MonitorTimer = new  byte[1];
 DO  final byte[] SCD_APN0_Enable = new  byte[1];
 DO  final byte[] SCD_APN1_Enable = new  byte[1];
 DO  final byte[] SCD_APN2_Enable = new  byte[1];
 DO  final byte[] SCD_APN3_Enable = new  byte[1];
--content--
  public Stalled_Connection_Detection( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Set_SIM_Test_Dataset 1 Ramses Var 00 01 */
public static class Set_SIM_Test_Dataset_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Set_SIM_Test_Dataset_1) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Set_SIM_Test_Dataset_1) 
    
     private static int SIZE = 0;
    private static final int Offset$SIM_Test_Dataset = SIZE  += 1;
    
    }// tplMakeInitializer(Set_SIM_Test_Dataset_1) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Set_SIM_Test_Dataset_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SIM_Test_Dataset = new  byte[1];
--content--
  public Set_SIM_Test_Dataset_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag_Transmission_Statistics 1 Ramses Var 00 01 */
public static class RDiag_Transmission_Statistics_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Transmission_Statistics_1) 
    private final byte[] _buffer = new byte[+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Transmission_Statistics_1) 
    
     private static int SIZE = 0;
    private static final int Offset$Overall_Transmission_Counter = SIZE  += 255;
    private static final int Offset$Overall_Transmission_Size = SIZE  += 255;
    
    }// tplMakeInitializer(RDiag_Transmission_Statistics_1) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 255;
      
        copyTo( 0 );
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Transmission_Statistics_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Overall_Transmission_Counter = new  byte[255];
 DO  final byte[] Overall_Transmission_Size = new  byte[255];
--content--
  public RDiag_Transmission_Statistics_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag_RDA_Initial_Summary_Block 1 Ramses Var 00 01 */
public static class RDiag_RDA_Initial_Summary_Block_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_RDA_Initial_Summary_Block_1) 
    private final byte[] _buffer = new byte[+50];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_RDA_Initial_Summary_Block_1) 
    
     private static int SIZE = 0;
    private static final int Offset$Datablock = SIZE  += 50;
    
    }// tplMakeInitializer(RDiag_RDA_Initial_Summary_Block_1) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 50;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_RDA_Initial_Summary_Block_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Datablock = new  byte[50];
--content--
  public RDiag_RDA_Initial_Summary_Block_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Internal_SW_Versions */
public static class TCU_Internal_SW_Versions {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Internal_SW_Versions) 
    private final byte[] _buffer = new byte[+64+64+64+64+64+64+64+64+64+64+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Internal_SW_Versions) 
    
     private static int SIZE = 0;
    private static final int Offset$VuC_Bootloader = SIZE  += 64;
    private static final int Offset$VuC_Application = SIZE  += 64;
    private static final int Offset$VuCOther1_1 = SIZE  += 64;
    private static final int Offset$VuCOther2 = SIZE  += 64;
    private static final int Offset$SoC_Bootloader = SIZE  += 64;
    private static final int Offset$SoC_Linux_Kernel = SIZE  += 64;
    private static final int Offset$SoC_Linux_System = SIZE  += 64;
    private static final int Offset$SoC_Modem_Software = SIZE  += 64;
    private static final int Offset$SoCOther1 = SIZE  += 64;
    private static final int Offset$SoCOther2 = SIZE  += 64;
    private static final int Offset$cathiVersion = SIZE  += 64;
    
    }// tplMakeInitializer(TCU_Internal_SW_Versions) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Internal_SW_Versions other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] VuC_Bootloader = new  byte[64];
 DO  final byte[] VuC_Application = new  byte[64];
 DO  final byte[] VuCOther1_1 = new  byte[64];
 DO  final byte[] VuCOther2 = new  byte[64];
 DO  final byte[] SoC_Bootloader = new  byte[64];
 DO  final byte[] SoC_Linux_Kernel = new  byte[64];
 DO  final byte[] SoC_Linux_System = new  byte[64];
 DO  final byte[] SoC_Modem_Software = new  byte[64];
 DO  final byte[] SoCOther1 = new  byte[64];
 DO  final byte[] SoCOther2 = new  byte[64];
 DO  final byte[] cathiVersion = new  byte[64];
--content--
  public TCU_Internal_SW_Versions( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle_Configuration */
public static class Vehicle_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Configuration) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$audioParameterSetSelection = SIZE  += 1;
    private static final int Offset$muteLine = SIZE  += 1;
    private static final int Offset$carsharing = SIZE  += 1;
    private static final int Offset$FOTA_RSWDL_Support_1 = SIZE  += 1;
    private static final int Offset$tdpResetProhibition = SIZE  += 1;
    private static final int Offset$GPS_Antenna_Type = SIZE  += 1;
    
    }// tplMakeInitializer(Vehicle_Configuration) 
    
    {
        int currentOffset = 0;
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] audioParameterSetSelection = new  byte[1];
 DO  final byte[] muteLine = new  byte[1];
 DO  final byte[] carsharing = new  byte[1];
 DO  final byte[] FOTA_RSWDL_Support_1 = new  byte[1];
 DO  final byte[] tdpResetProhibition = new  byte[1];
 DO  final byte[] GPS_Antenna_Type = new  byte[1];
--content--
  public Vehicle_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Voice_Call_Execution_Settings */
public static class Voice_Call_Execution_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Voice_Call_Execution_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Voice_Call_Execution_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$voiceCallMuteDuration = SIZE  += 1;
    private static final int Offset$ecallPsapCallingStrategy = SIZE  += 1;
    private static final int Offset$ecallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$ecallSmsTransmission = SIZE  += 1;
    private static final int Offset$ecallInbandDataPush = SIZE  += 1;
    private static final int Offset$ecallDtmfAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallDtmfManualEcall = SIZE  += 1;
    private static final int Offset$ecallDelayTimer = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerManualEcall = SIZE  += 1;
    private static final int Offset$ecallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$eCallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ecallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$scallDppConfirmed = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    
    }// tplMakeInitializer(Voice_Call_Execution_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Voice_Call_Execution_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] voiceCallMuteDuration = new  byte[1];
 DO  final byte[] ecallPsapCallingStrategy = new  byte[1];
 DO  final byte[] ecallAtpDataTransmission = new  byte[1];
 DO  final byte[] ecallSmsTransmission = new  byte[1];
 DO  final byte[] ecallInbandDataPush = new  byte[1];
 DO  final byte[] ecallDtmfAutomaticEcall = new  byte[1];
 DO  final byte[] ecallDtmfManualEcall = new  byte[1];
 DO  final byte[] ecallDelayTimer = new  byte[1];
 DO  final byte[] ecallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ecallKeyLockTimerManualEcall = new  byte[1];
 DO  final byte[] ecallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] eCallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ecallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] scallDppConfirmed = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
--content--
  public Voice_Call_Execution_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag_Transmission_Statistics 1 Ramses Var 00 02 */
public static class RDiag_Transmission_Statistics_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Transmission_Statistics_1) 
    private final byte[] _buffer = new byte[+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Transmission_Statistics_1) 
    
     private static int SIZE = 0;
    private static final int Offset$Overall_Transmission_Counter = SIZE  += 255;
    private static final int Offset$Overall_Transmission_Size = SIZE  += 255;
    
    }// tplMakeInitializer(RDiag_Transmission_Statistics_1) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 255;
      
        copyTo( 0 );
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Transmission_Statistics_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Overall_Transmission_Counter = new  byte[255];
 DO  final byte[] Overall_Transmission_Size = new  byte[255];
--content--
  public RDiag_Transmission_Statistics_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag_RDA_Initial_Summary_Block 1 Ramses Var 00 02 */
public static class RDiag_RDA_Initial_Summary_Block_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_RDA_Initial_Summary_Block_1) 
    private final byte[] _buffer = new byte[+50];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_RDA_Initial_Summary_Block_1) 
    
     private static int SIZE = 0;
    private static final int Offset$Datablock = SIZE  += 50;
    
    }// tplMakeInitializer(RDiag_RDA_Initial_Summary_Block_1) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 50;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_RDA_Initial_Summary_Block_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Datablock = new  byte[50];
--content--
  public RDiag_RDA_Initial_Summary_Block_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Set_SIM_Test_Dataset 1 Ramses Var 00 02 */
public static class Set_SIM_Test_Dataset_1 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Set_SIM_Test_Dataset_1) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Set_SIM_Test_Dataset_1) 
    
     private static int SIZE = 0;
    private static final int Offset$SIM_Test_Dataset = SIZE  += 1;
    
    }// tplMakeInitializer(Set_SIM_Test_Dataset_1) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Set_SIM_Test_Dataset_1 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SIM_Test_Dataset = new  byte[1];
--content--
  public Set_SIM_Test_Dataset_1( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** MNO Configtable Ramses Var 00 02 */
public static class MNO_Configtable {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(MNO_Configtable) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(MNO_Configtable) 
    
     private static int SIZE = 0;
    private static final int Offset$MNO_Configtable = SIZE  += 4000;
    
    }// tplMakeInitializer(MNO_Configtable) 
    
    {
        int currentOffset = 0;
        copyTo( 31,139,8,0,0,0,0,0,0,0,237,221,93,115,162,72,23,0,224,191,98,185,119,239,78,49,136,104,50,115,135,104,18,19,33,150,95,187,147,173,173,84,11,173,118,5,193,130,38,217,113,106,254,251,219,144,100,162,4,26,220,85,12,114,230,98,102,34,72,7,124,60,125,250,131,230,71,213,112,108,138,136,141,93,29,45,113,245,107,85,211,111,239,85,199,158,145,57,69,83,11,87,63,189,237,49,192,22,70,94,176,211,64,209,134,157,225,125,77,168,179,237,38,162,236,85,250,182,245,237,229,234,215,31,85,185,41,138,95,170,95,255,250,81,85,29,223,166,46,193,30,251,169,250,191,234,223,159,170,125,215,121,36,38,118,217,155,212,5,177,81,101,108,19,195,89,86,216,235,38,59,68,87,27,6,71,152,32,203,15,142,219,198,51,228,91,52,252,177,198,54,143,189,240,157,62,251,199,102,191,188,210,82,255,252,118,23,108,232,35,207,123,114,92,147,109,92,189,252,247,109,99,183,127,63,193,174,71,28,155,109,238,246,31,229,207,236,175,102,245,231,167,234,213,109,98,113,82,82,113,18,175,56,137,91,92,75,106,109,22,215,186,110,117,244,59,177,46,168,189,139,177,160,95,107,146,166,244,245,164,114,235,188,114,235,41,229,170,49,229,202,217,202,149,121,229,202,220,114,135,11,199,165,134,99,226,54,34,147,86,224,68,108,54,26,162,200,254,145,155,146,200,254,84,55,118,154,56,196,192,42,178,44,47,102,207,224,115,212,70,227,251,33,89,179,83,168,49,98,63,63,69,124,141,176,71,135,152,222,215,120,206,218,157,9,48,203,149,153,116,162,204,164,20,102,149,176,144,74,87,31,1,56,0,151,4,78,202,14,174,158,13,92,191,15,222,192,91,146,183,70,186,55,85,231,134,182,32,83,187,87,44,139,32,123,29,22,3,220,128,91,60,183,154,116,246,158,27,163,21,52,16,154,208,64,248,232,210,160,129,0,204,32,160,65,3,1,192,65,3,1,188,149,196,27,52,16,128,219,241,27,8,108,151,243,244,6,194,205,40,196,86,185,113,92,140,114,83,150,31,176,24,91,83,105,250,40,9,38,34,75,11,187,2,113,232,254,88,197,136,218,60,47,121,127,144,98,13,253,246,219,217,217,185,148,8,39,220,44,70,180,52,178,39,249,204,74,80,5,134,84,42,207,101,2,152,226,131,169,239,13,76,180,78,219,2,147,111,61,6,96,142,22,97,162,237,59,14,152,104,186,253,2,134,85,185,94,105,164,148,214,73,76,96,97,26,234,53,177,118,38,166,39,46,202,232,37,115,209,149,139,145,242,94,11,89,122,39,151,21,111,106,177,209,140,162,195,39,196,83,201,200,86,228,62,115,97,102,32,104,182,139,201,128,194,61,234,204,76,196,80,61,123,54,19,0,10,237,132,33,135,93,233,207,236,212,43,206,10,219,128,233,64,152,38,142,137,102,142,141,89,171,42,248,84,4,214,212,21,16,165,235,194,154,138,38,60,177,166,62,39,100,62,167,136,106,41,45,83,63,213,178,121,146,211,61,105,157,63,147,170,183,96,83,41,232,28,185,114,91,226,127,62,22,155,152,48,20,116,235,136,50,3,149,154,29,117,77,214,226,234,15,110,219,185,165,209,31,68,209,156,10,27,144,14,79,40,44,207,72,43,111,159,130,26,210,243,16,90,188,30,182,181,86,223,150,83,63,207,158,20,133,110,130,186,43,44,173,50,164,104,78,236,57,32,58,69,68,201,33,104,71,68,209,44,232,23,162,231,193,50,64,116,194,136,248,145,72,206,142,40,218,21,20,65,212,81,59,165,156,191,4,138,88,50,148,93,145,156,174,40,8,71,160,168,124,138,98,98,81,144,79,75,50,171,8,83,243,233,14,37,30,178,16,45,101,78,237,35,28,240,145,242,243,243,92,226,7,3,244,31,210,234,95,124,74,159,90,151,198,18,55,187,222,197,82,52,187,222,178,84,234,12,187,52,150,254,77,197,38,137,178,24,211,81,116,217,26,68,60,189,118,162,62,119,55,142,109,66,177,89,185,97,156,76,103,89,54,81,236,115,125,156,174,92,83,18,136,33,96,3,31,94,20,50,102,2,177,41,59,56,166,130,255,32,56,52,113,16,248,40,221,144,146,152,30,169,148,241,136,107,74,241,61,182,111,126,179,203,74,139,41,24,188,124,211,132,104,33,53,181,58,61,174,166,22,182,230,196,135,208,148,179,166,41,46,164,38,245,170,195,213,52,124,34,116,141,93,11,217,165,235,90,58,182,40,99,81,76,81,119,124,81,234,26,27,139,202,0,175,252,169,69,12,64,149,51,170,117,33,81,181,59,99,46,170,75,236,46,145,253,29,52,229,171,201,44,102,165,215,214,111,184,154,218,216,94,34,247,1,52,229,172,169,152,205,187,206,176,207,79,161,86,136,196,204,153,4,75,135,180,132,189,66,90,186,232,234,92,75,23,196,134,84,60,127,77,51,82,76,77,3,133,175,201,69,118,120,49,1,83,158,152,220,66,98,186,28,168,252,20,220,197,24,48,229,141,105,94,76,76,87,99,126,61,119,229,219,115,228,66,123,46,103,77,11,191,144,154,186,3,126,151,120,215,197,144,53,229,62,90,71,138,217,57,208,29,241,147,166,46,69,22,4,166,156,3,19,41,230,88,93,111,28,189,111,105,219,82,207,255,7,47,167,142,239,150,110,110,202,177,65,89,197,172,233,244,94,155,11,74,199,116,1,163,117,199,0,101,91,197,4,117,203,159,239,164,59,238,19,130,234,46,111,76,78,33,49,245,111,249,121,120,223,129,200,148,63,166,85,49,35,83,127,192,159,53,215,103,199,247,231,168,116,75,255,29,185,85,183,42,102,38,62,184,229,79,32,24,56,75,100,195,28,204,188,99,147,91,204,138,110,248,71,218,172,57,108,198,173,147,3,152,14,137,201,43,102,135,211,112,194,159,141,50,180,156,71,244,0,177,41,119,78,197,156,142,210,234,94,241,231,135,59,30,171,232,42,87,216,93,227,57,219,7,88,29,154,149,139,131,251,59,12,138,205,55,92,69,148,53,28,180,248,129,10,187,83,8,83,224,41,115,239,248,132,63,210,210,195,148,66,135,1,136,218,101,42,38,191,207,160,227,81,7,90,121,0,42,123,136,26,241,187,13,122,132,46,124,240,4,158,50,183,245,248,243,158,130,182,30,134,8,5,162,178,207,164,27,76,248,183,219,185,14,162,0,10,64,101,238,63,184,228,143,8,183,124,107,142,96,185,2,16,149,253,142,224,111,252,27,164,212,239,43,151,228,247,64,11,240,84,112,79,90,143,223,202,211,144,69,33,60,1,167,140,156,70,127,240,115,242,17,34,79,8,6,243,78,222,83,93,10,159,76,201,243,36,137,231,25,60,93,241,187,53,71,11,68,160,91,179,12,162,50,68,168,76,162,148,241,48,125,1,49,100,65,78,126,120,82,145,37,196,242,157,69,190,175,8,165,223,241,231,105,234,248,169,114,135,17,4,169,35,204,252,205,119,125,158,125,137,26,164,68,168,129,239,121,16,158,242,198,228,126,160,155,92,126,63,251,34,215,206,131,221,190,100,233,132,234,165,116,66,97,11,185,62,244,25,148,59,133,218,205,212,141,114,199,53,117,131,214,232,97,225,81,104,235,1,171,29,88,105,55,252,91,242,52,100,96,19,102,29,148,94,213,46,29,156,58,127,122,185,230,176,179,179,241,220,117,192,20,152,202,102,234,78,185,224,207,60,112,124,186,168,40,51,118,174,16,169,114,206,211,215,168,144,164,146,158,230,242,11,86,240,56,169,96,167,74,242,147,163,1,214,126,97,189,150,24,224,170,9,148,93,252,194,178,138,62,216,37,142,85,171,244,180,210,63,232,253,225,122,13,88,242,220,20,230,166,183,42,44,173,232,195,20,39,23,33,170,205,135,146,135,229,39,61,154,28,104,157,12,173,186,36,158,165,210,250,15,79,88,100,180,20,77,233,39,216,2,90,167,77,171,153,66,75,18,191,164,211,138,62,108,49,178,136,43,59,224,20,25,176,90,249,193,33,109,158,160,92,188,186,111,204,239,82,31,249,238,3,134,149,126,114,110,250,209,98,174,223,170,125,227,143,247,105,200,66,223,97,196,175,4,253,83,251,26,65,86,6,252,62,207,151,7,47,42,46,154,86,58,75,226,130,172,83,151,181,183,123,174,46,83,158,207,65,236,57,90,57,46,172,93,126,242,164,246,22,172,122,252,149,16,20,150,145,195,136,95,9,64,237,109,209,233,97,202,10,230,6,172,96,14,160,118,73,208,213,219,180,33,100,100,192,240,49,120,202,234,169,205,191,169,65,115,44,211,121,132,26,15,64,101,205,202,53,126,119,212,16,217,21,13,185,196,134,32,5,166,50,154,26,223,240,77,141,31,92,68,108,104,231,1,168,4,80,27,120,238,197,90,157,153,218,22,182,141,235,189,163,183,19,220,62,163,232,41,196,152,216,229,173,145,207,119,183,183,170,255,246,173,239,46,117,226,21,222,186,176,182,111,89,145,11,43,195,133,61,204,133,109,192,133,61,204,133,173,193,133,221,227,133,149,234,114,67,124,119,69,99,134,0,46,45,103,138,169,227,27,139,74,248,106,240,43,16,123,30,252,48,35,165,155,60,225,35,44,76,165,169,36,176,10,125,105,97,247,240,245,120,238,35,222,13,73,20,107,137,152,130,173,59,76,197,137,206,75,221,208,20,204,198,9,203,172,12,41,154,51,82,96,233,36,45,37,103,129,59,90,138,78,70,141,88,10,15,11,150,78,218,18,63,46,201,233,150,186,122,244,78,49,168,223,54,139,155,83,97,197,174,66,105,25,53,227,67,210,118,38,42,65,38,186,199,76,84,110,6,31,200,187,76,52,58,227,82,93,16,27,5,83,80,12,103,25,118,37,149,237,171,217,186,110,117,244,59,177,46,168,189,139,177,160,95,107,146,166,244,245,195,127,67,95,202,149,179,149,187,207,175,106,77,108,54,26,12,135,216,148,131,239,165,40,38,194,138,238,89,219,254,10,51,98,153,51,212,45,103,44,175,0,102,185,50,147,78,148,89,52,121,141,50,123,73,95,187,250,8,192,1,184,36,112,82,118,112,209,251,171,18,192,245,251,224,13,188,37,121,107,164,123,83,117,110,104,11,50,181,123,197,178,8,178,215,165,188,147,15,184,101,229,86,147,206,222,115,11,26,8,178,40,197,116,85,71,27,8,67,103,70,167,200,126,120,30,103,190,70,171,242,45,34,228,77,207,94,91,238,2,43,150,125,13,79,176,1,255,26,151,226,73,5,91,163,140,164,236,217,255,47,68,65,13,25,26,122,238,163,6,73,39,42,41,249,238,208,29,37,69,107,193,24,73,165,172,255,74,35,137,31,147,206,179,75,138,102,238,91,146,88,29,94,186,37,23,189,169,12,132,98,131,209,223,63,127,254,31,145,32,12,75,234,229,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( MNO_Configtable other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] MNO_Configtable = new  byte[4000];
--content--
  public MNO_Configtable( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RemoteDoorAndWindowSettings Ramses Var 00 02 */
public static class RemoteDoorAndWindowSettings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RemoteDoorAndWindowSettings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RemoteDoorAndWindowSettings) 
    
     private static int SIZE = 0;
    private static final int Offset$remoteControllableWindows = SIZE  += 1;
    private static final int Offset$remoteControllableDoors = SIZE  += 1;
    private static final int Offset$VentilateWindowPosition = SIZE  += 1;
    private static final int Offset$CloseWindowPosition = SIZE  += 1;
    private static final int Offset$OpenWindowPosition = SIZE  += 1;
    
    }// tplMakeInitializer(RemoteDoorAndWindowSettings) 
    
    {
        int currentOffset = 0;
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 877 );
        currentOffset += 1;
      
        copyTo( 2047 );
        currentOffset += 1;
      
        copyTo( 3000 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RemoteDoorAndWindowSettings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] remoteControllableWindows = new  byte[1];
 DO  final byte[] remoteControllableDoors = new  byte[1];
 DO  final byte[] VentilateWindowPosition = new  byte[1];
 DO  final byte[] CloseWindowPosition = new  byte[1];
 DO  final byte[] OpenWindowPosition = new  byte[1];
--content--
  public RemoteDoorAndWindowSettings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SalesCountryCode Ramses Var 00 02 */
public static class SalesCountryCode {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SalesCountryCode) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SalesCountryCode) 
    
     private static int SIZE = 0;
    private static final int Offset$salesCountryCode = SIZE  += 1;
    
    }// tplMakeInitializer(SalesCountryCode) 
    
    {
        int currentOffset = 0;
        copyTo( 5132110 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SalesCountryCode other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] salesCountryCode = new  byte[1];
--content--
  public SalesCountryCode( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Stalled Connection Detection Ramses Var 00 02 */
public static class Stalled_Connection_Detection {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Stalled_Connection_Detection) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Stalled_Connection_Detection) 
    
     private static int SIZE = 0;
    private static final int Offset$SCD_RetryCounterMax = SIZE  += 1;
    private static final int Offset$SCD_MonitorTimer = SIZE  += 1;
    private static final int Offset$SCD_APN0_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN1_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN2_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN3_Enable = SIZE  += 1;
    
    }// tplMakeInitializer(Stalled_Connection_Detection) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 30 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Stalled_Connection_Detection other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SCD_RetryCounterMax = new  byte[1];
 DO  final byte[] SCD_MonitorTimer = new  byte[1];
 DO  final byte[] SCD_APN0_Enable = new  byte[1];
 DO  final byte[] SCD_APN1_Enable = new  byte[1];
 DO  final byte[] SCD_APN2_Enable = new  byte[1];
 DO  final byte[] SCD_APN3_Enable = new  byte[1];
--content--
  public Stalled_Connection_Detection( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RTM_settings 00 02 */
public static class RTM_settings_00_02 {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RTM_settings_00_02) 
    private final byte[] _buffer = new byte[+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RTM_settings_00_02) 
    
     private static int SIZE = 0;
    private static final int Offset$RTMst = SIZE  += 1;
    private static final int Offset$dataTxTimer = SIZE  += 1;
    private static final int Offset$dataRxTimer = SIZE  += 1;
    private static final int Offset$dataStTimer = SIZE  += 1;
    
    }// tplMakeInitializer(RTM_settings_00_02) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RTM_settings_00_02 other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RTMst = new  byte[1];
 DO  final byte[] dataTxTimer = new  byte[1];
 DO  final byte[] dataRxTimer = new  byte[1];
 DO  final byte[] dataStTimer = new  byte[1];
--content--
  public RTM_settings_00_02( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Internal_SW_Versions */
public static class TCU_Internal_SW_Versions {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Internal_SW_Versions) 
    private final byte[] _buffer = new byte[+64+64+64+64+64+64+64+64+64+16+320+16+16+42+64+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Internal_SW_Versions) 
    
     private static int SIZE = 0;
    private static final int Offset$VuC_Bootloader = SIZE  += 64;
    private static final int Offset$VuC_Application = SIZE  += 64;
    private static final int Offset$Vuc_HSM_Firmware = SIZE  += 64;
    private static final int Offset$VuCOther1_1 = SIZE  += 64;
    private static final int Offset$VuCOther2 = SIZE  += 64;
    private static final int Offset$SoC_Bootloader = SIZE  += 64;
    private static final int Offset$SoC_Linux_Kernel = SIZE  += 64;
    private static final int Offset$SoC_Linux_System = SIZE  += 64;
    private static final int Offset$Soc_Modem_Software = SIZE  += 64;
    private static final int Offset$eSim_Software = SIZE  += 16;
    private static final int Offset$SoC_Modem_Configuration = SIZE  += 320;
    private static final int Offset$SoC_FDB = SIZE  += 16;
    private static final int Offset$SoC_Persistence = SIZE  += 16;
    private static final int Offset$SoC_Valens_FW = SIZE  += 42;
    private static final int Offset$SoCOther1 = SIZE  += 64;
    private static final int Offset$SoCOther2 = SIZE  += 64;
    
    }// tplMakeInitializer(TCU_Internal_SW_Versions) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 320;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 42;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Internal_SW_Versions other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] VuC_Bootloader = new  byte[64];
 DO  final byte[] VuC_Application = new  byte[64];
 DO  final byte[] Vuc_HSM_Firmware = new  byte[64];
 DO  final byte[] VuCOther1_1 = new  byte[64];
 DO  final byte[] VuCOther2 = new  byte[64];
 DO  final byte[] SoC_Bootloader = new  byte[64];
 DO  final byte[] SoC_Linux_Kernel = new  byte[64];
 DO  final byte[] SoC_Linux_System = new  byte[64];
 DO  final byte[] Soc_Modem_Software = new  byte[64];
 DO  final byte[] eSim_Software = new  byte[16];
 DO  final byte[] SoC_Modem_Configuration = new  byte[320];
 DO  final byte[] SoC_FDB = new  byte[16];
 DO  final byte[] SoC_Persistence = new  byte[16];
 DO  final byte[] SoC_Valens_FW = new  byte[42];
 DO  final byte[] SoCOther1 = new  byte[64];
 DO  final byte[] SoCOther2 = new  byte[64];
--content--
  public TCU_Internal_SW_Versions( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Internal_SW_Versions */
public static class TCU_Internal_SW_Versions {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Internal_SW_Versions) 
    private final byte[] _buffer = new byte[+64+64+64+64+64+64+64+64+64+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Internal_SW_Versions) 
    
     private static int SIZE = 0;
    private static final int Offset$VuC_Bootloader = SIZE  += 64;
    private static final int Offset$VuC_Application = SIZE  += 64;
    private static final int Offset$VuCOther1_1 = SIZE  += 64;
    private static final int Offset$VuCOther2 = SIZE  += 64;
    private static final int Offset$SoC_Bootloader = SIZE  += 64;
    private static final int Offset$SoC_Linux_Kernel = SIZE  += 64;
    private static final int Offset$SoC_Linux_System = SIZE  += 64;
    private static final int Offset$SoC_Modem_Software = SIZE  += 64;
    private static final int Offset$SoCOther1 = SIZE  += 64;
    private static final int Offset$SoCOther2 = SIZE  += 64;
    
    }// tplMakeInitializer(TCU_Internal_SW_Versions) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Internal_SW_Versions other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] VuC_Bootloader = new  byte[64];
 DO  final byte[] VuC_Application = new  byte[64];
 DO  final byte[] VuCOther1_1 = new  byte[64];
 DO  final byte[] VuCOther2 = new  byte[64];
 DO  final byte[] SoC_Bootloader = new  byte[64];
 DO  final byte[] SoC_Linux_Kernel = new  byte[64];
 DO  final byte[] SoC_Linux_System = new  byte[64];
 DO  final byte[] SoC_Modem_Software = new  byte[64];
 DO  final byte[] SoCOther1 = new  byte[64];
 DO  final byte[] SoCOther2 = new  byte[64];
--content--
  public TCU_Internal_SW_Versions( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Voice_Call_Execution_Settings */
public static class Voice_Call_Execution_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Voice_Call_Execution_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Voice_Call_Execution_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$voiceCallMuteDuration = SIZE  += 1;
    private static final int Offset$ecallPsapCallingStrategy = SIZE  += 1;
    private static final int Offset$ecallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$ecallSmsTransmission = SIZE  += 1;
    private static final int Offset$ecallInbandDataPush = SIZE  += 1;
    private static final int Offset$ecallDtmfAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallDtmfManualEcall = SIZE  += 1;
    private static final int Offset$ecallDelayTimer = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerAutomaticEcall = SIZE  += 1;
    private static final int Offset$ecallKeyLockTimerManualEcall = SIZE  += 1;
    private static final int Offset$ecallPresafeSoundtTimer = SIZE  += 1;
    private static final int Offset$eCallEmergencyStopAvl = SIZE  += 1;
    private static final int Offset$ecallExtendedEmergencyCallModeAfterCrash = SIZE  += 1;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$scallDppConfirmed = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    
    }// tplMakeInitializer(Voice_Call_Execution_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 6 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 4 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Voice_Call_Execution_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] voiceCallMuteDuration = new  byte[1];
 DO  final byte[] ecallPsapCallingStrategy = new  byte[1];
 DO  final byte[] ecallAtpDataTransmission = new  byte[1];
 DO  final byte[] ecallSmsTransmission = new  byte[1];
 DO  final byte[] ecallInbandDataPush = new  byte[1];
 DO  final byte[] ecallDtmfAutomaticEcall = new  byte[1];
 DO  final byte[] ecallDtmfManualEcall = new  byte[1];
 DO  final byte[] ecallDelayTimer = new  byte[1];
 DO  final byte[] ecallKeyLockTimerAutomaticEcall = new  byte[1];
 DO  final byte[] ecallKeyLockTimerManualEcall = new  byte[1];
 DO  final byte[] ecallPresafeSoundtTimer = new  byte[1];
 DO  final byte[] eCallEmergencyStopAvl = new  byte[1];
 DO  final byte[] ecallExtendedEmergencyCallModeAfterCrash = new  byte[1];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] scallDppConfirmed = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
--content--
  public Voice_Call_Execution_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle_Configuration */
public static class Vehicle_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Configuration) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$connectionWithHu = SIZE  += 1;
    private static final int Offset$vehicleType = SIZE  += 1;
    private static final int Offset$MapMatchedPositioning = SIZE  += 1;
    private static final int Offset$offlineModeCapable = SIZE  += 1;
    private static final int Offset$productionModeCapable = SIZE  += 1;
    private static final int Offset$transportModeCapable = SIZE  += 1;
    private static final int Offset$carsharing = SIZE  += 1;
    private static final int Offset$FOTA_RSWDL_Support_1 = SIZE  += 1;
    private static final int Offset$tdpResetProhibition = SIZE  += 1;
    private static final int Offset$GPS_Antenna_Type = SIZE  += 1;
    
    }// tplMakeInitializer(Vehicle_Configuration) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] connectionWithHu = new  byte[1];
 DO  final byte[] vehicleType = new  byte[1];
 DO  final byte[] MapMatchedPositioning = new  byte[1];
 DO  final byte[] offlineModeCapable = new  byte[1];
 DO  final byte[] productionModeCapable = new  byte[1];
 DO  final byte[] transportModeCapable = new  byte[1];
 DO  final byte[] carsharing = new  byte[1];
 DO  final byte[] FOTA_RSWDL_Support_1 = new  byte[1];
 DO  final byte[] tdpResetProhibition = new  byte[1];
 DO  final byte[] GPS_Antenna_Type = new  byte[1];
--content--
  public Vehicle_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** System_Time */
public static class System_Time {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(System_Time) 
    private final byte[] _buffer = new byte[+255+1+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(System_Time) 
    
     private static int SIZE = 0;
    private static final int Offset$System_Time_year = SIZE  += 255;
    private static final int Offset$System_Time_month = SIZE  += 1;
    private static final int Offset$System_Time_day = SIZE  += 255;
    private static final int Offset$System_Time_hour = SIZE  += 255;
    private static final int Offset$System_Time_minute = SIZE  += 255;
    
    }// tplMakeInitializer(System_Time) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( System_Time other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] System_Time_year = new  byte[255];
 DO  final byte[] System_Time_month = new  byte[1];
 DO  final byte[] System_Time_day = new  byte[255];
 DO  final byte[] System_Time_hour = new  byte[255];
 DO  final byte[] System_Time_minute = new  byte[255];
--content--
  public System_Time( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** FastpathTopicTree */
public static class FastpathTopicTree {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(FastpathTopicTree) 
    private final byte[] _buffer = new byte[+800];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(FastpathTopicTree) 
    
     private static int SIZE = 0;
    private static final int Offset$fastpathTopicTree = SIZE  += 800;
    
    }// tplMakeInitializer(FastpathTopicTree) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 800;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( FastpathTopicTree other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] fastpathTopicTree = new  byte[800];
--content--
  public FastpathTopicTree( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Fastpath_settings */
public static class Fastpath_settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Fastpath_settings) 
    private final byte[] _buffer = new byte[+101+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Fastpath_settings) 
    
     private static int SIZE = 0;
    private static final int Offset$fastpathHostAddress = SIZE  += 101;
    private static final int Offset$fastpathKeepAliveInterval = SIZE  += 1;
    
    }// tplMakeInitializer(Fastpath_settings) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 90 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Fastpath_settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] fastpathHostAddress = new  byte[101];
 DO  final byte[] fastpathKeepAliveInterval = new  byte[1];
--content--
  public Fastpath_settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** CEP_URL */
public static class CEP_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(CEP_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(CEP_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$CATHIServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(CEP_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( CEP_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] CATHIServerUrl = new  byte[101];
--content--
  public CEP_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** APN_Names */
public static class APN_Names {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(APN_Names) 
    private final byte[] _buffer = new byte[+101+101+101+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(APN_Names) 
    
     private static int SIZE = 0;
    private static final int Offset$IMS = SIZE  += 101;
    private static final int Offset$HOS = SIZE  += 101;
    private static final int Offset$B2B = SIZE  += 101;
    private static final int Offset$B2C = SIZE  += 101;
    
    }// tplMakeInitializer(APN_Names) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
        copyTo( 68,101,102,97,117,108,116,86,97,108,117,101,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( APN_Names other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] IMS = new  byte[101];
 DO  final byte[] HOS = new  byte[101];
 DO  final byte[] B2B = new  byte[101];
 DO  final byte[] B2C = new  byte[101];
--content--
  public APN_Names( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RCS_URL */
public static class RCS_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RCS_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RCS_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$rcsServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(RCS_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RCS_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] rcsServerUrl = new  byte[101];
--content--
  public RCS_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** SMS_Destinations */
public static class SMS_Destinations {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(SMS_Destinations) 
    private final byte[] _buffer = new byte[+20+20];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(SMS_Destinations) 
    
     private static int SIZE = 0;
    private static final int Offset$smsDestinationEcall = SIZE  += 20;
    private static final int Offset$smsDestination = SIZE  += 20;
    
    }// tplMakeInitializer(SMS_Destinations) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( SMS_Destinations other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] smsDestinationEcall = new  byte[20];
 DO  final byte[] smsDestination = new  byte[20];
--content--
  public SMS_Destinations( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ATP_URL */
public static class ATP_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ATP_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ATP_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$atpServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(ATP_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ATP_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] atpServerUrl = new  byte[101];
--content--
  public ATP_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** OMA_DM_Server_URL */
public static class OMA_DM_Server_URL {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(OMA_DM_Server_URL) 
    private final byte[] _buffer = new byte[+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(OMA_DM_Server_URL) 
    
     private static int SIZE = 0;
    private static final int Offset$omadmServerUrl = SIZE  += 101;
    
    }// tplMakeInitializer(OMA_DM_Server_URL) 
    
    {
        int currentOffset = 0;
        copyTo( 68,101,102,97,117,108,116,95,86,97,108,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( OMA_DM_Server_URL other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] omadmServerUrl = new  byte[101];
--content--
  public OMA_DM_Server_URL( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Activate SAR Data Storage */
public static class Activate_SAR_Data_Storage {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Activate_SAR_Data_Storage) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Activate_SAR_Data_Storage) 
    
     private static int SIZE = 0;
    private static final int Offset$SAR_Data_Storage_Status = SIZE  += 1;
    
    }// tplMakeInitializer(Activate_SAR_Data_Storage) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Activate_SAR_Data_Storage other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SAR_Data_Storage_Status = new  byte[1];
--content--
  public Activate_SAR_Data_Storage( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Configure SAR Trigger Events */
public static class Configure_SAR_Trigger_Events {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Configure_SAR_Trigger_Events) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Configure_SAR_Trigger_Events) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Configure_SAR_Trigger_Events) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Configure_SAR_Trigger_Events other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Configure_SAR_Trigger_Events( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ServiceCall Setting */
public static class ServiceCall_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ServiceCall_Setting) 
    private final byte[] _buffer = new byte[+20+20+20+20+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ServiceCall_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$PrimaryRCall = SIZE  += 20;
    private static final int Offset$PrimaryICall = SIZE  += 20;
    private static final int Offset$SecondaryRCall = SIZE  += 20;
    private static final int Offset$SecondaryICall = SIZE  += 20;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$showDpp = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    private static final int Offset$sCallAudioRouting = SIZE  += 1;
    private static final int Offset$scallDataTransmissionTime = SIZE  += 1;
    private static final int Offset$scallCidDtmfMsd = SIZE  += 1;
    
    }// tplMakeInitializer(ServiceCall_Setting) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 20 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ServiceCall_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] PrimaryRCall = new  byte[20];
 DO  final byte[] PrimaryICall = new  byte[20];
 DO  final byte[] SecondaryRCall = new  byte[20];
 DO  final byte[] SecondaryICall = new  byte[20];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] showDpp = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
 DO  final byte[] sCallAudioRouting = new  byte[1];
 DO  final byte[] scallDataTransmissionTime = new  byte[1];
 DO  final byte[] scallCidDtmfMsd = new  byte[1];
--content--
  public ServiceCall_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** HU Connectivity Settings */
public static class HU_Connectivity_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(HU_Connectivity_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(HU_Connectivity_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$roamingIndicationViaWcc = SIZE  += 1;
    private static final int Offset$Provide_Internet_for_BRR = SIZE  += 1;
    private static final int Offset$Provide_Internet_for_HSDL = SIZE  += 1;
    private static final int Offset$KeepaliveFailedProbes = SIZE  += 1;
    private static final int Offset$KeepaliveTime = SIZE  += 1;
    private static final int Offset$KeepaliveInterval = SIZE  += 1;
    
    }// tplMakeInitializer(HU_Connectivity_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 30 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( HU_Connectivity_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] roamingIndicationViaWcc = new  byte[1];
 DO  final byte[] Provide_Internet_for_BRR = new  byte[1];
 DO  final byte[] Provide_Internet_for_HSDL = new  byte[1];
 DO  final byte[] KeepaliveFailedProbes = new  byte[1];
 DO  final byte[] KeepaliveTime = new  byte[1];
 DO  final byte[] KeepaliveInterval = new  byte[1];
--content--
  public HU_Connectivity_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Mobile Network Settings */
public static class Mobile_Network_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Mobile_Network_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Mobile_Network_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$REJ_SimResetCntMax = SIZE  += 1;
    private static final int Offset$REJ_Timer = SIZE  += 1;
    private static final int Offset$Network_REJ_Enable = SIZE  += 1;
    private static final int Offset$NetworkAttachTimer = SIZE  += 1;
    private static final int Offset$ConsiderEmergencyProfile = SIZE  += 1;
    
    }// tplMakeInitializer(Mobile_Network_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 180 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Mobile_Network_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] REJ_SimResetCntMax = new  byte[1];
 DO  final byte[] REJ_Timer = new  byte[1];
 DO  final byte[] Network_REJ_Enable = new  byte[1];
 DO  final byte[] NetworkAttachTimer = new  byte[1];
 DO  final byte[] ConsiderEmergencyProfile = new  byte[1];
--content--
  public Mobile_Network_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag ECU List (LIN) */
public static class RDiag_ECU_List_LIN {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_ECU_List_LIN) 
    private final byte[] _buffer = new byte[+3000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_ECU_List_LIN) 
    
     private static int SIZE = 0;
    private static final int Offset$HexDump_ECUList_LIN = SIZE  += 3000;
    
    }// tplMakeInitializer(RDiag_ECU_List_LIN) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 3000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_ECU_List_LIN other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] HexDump_ECUList_LIN = new  byte[3000];
--content--
  public RDiag_ECU_List_LIN( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ServiceCall Setting */
public static class ServiceCall_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ServiceCall_Setting) 
    private final byte[] _buffer = new byte[+20+20+20+20+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ServiceCall_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$PrimaryRCall = SIZE  += 20;
    private static final int Offset$PrimaryICall = SIZE  += 20;
    private static final int Offset$SecondaryRCall = SIZE  += 20;
    private static final int Offset$SecondaryICall = SIZE  += 20;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$showDpp = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    private static final int Offset$sCallAudioRouting = SIZE  += 1;
    private static final int Offset$scallCidDtmfMsd = SIZE  += 1;
    
    }// tplMakeInitializer(ServiceCall_Setting) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ServiceCall_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] PrimaryRCall = new  byte[20];
 DO  final byte[] PrimaryICall = new  byte[20];
 DO  final byte[] SecondaryRCall = new  byte[20];
 DO  final byte[] SecondaryICall = new  byte[20];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] showDpp = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
 DO  final byte[] sCallAudioRouting = new  byte[1];
 DO  final byte[] scallCidDtmfMsd = new  byte[1];
--content--
  public ServiceCall_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ServiceCall Setting */
public static class ServiceCall_Setting {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ServiceCall_Setting) 
    private final byte[] _buffer = new byte[+20+20+20+20+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ServiceCall_Setting) 
    
     private static int SIZE = 0;
    private static final int Offset$PrimaryRCall = SIZE  += 20;
    private static final int Offset$PrimaryICall = SIZE  += 20;
    private static final int Offset$SecondaryRCall = SIZE  += 20;
    private static final int Offset$SecondaryICall = SIZE  += 20;
    private static final int Offset$scallDtmf = SIZE  += 1;
    private static final int Offset$scallDpp_Timeout = SIZE  += 1;
    private static final int Offset$showDpp = SIZE  += 1;
    private static final int Offset$scallAtpDataTransmission = SIZE  += 1;
    private static final int Offset$scallInbandDataPull = SIZE  += 1;
    private static final int Offset$maintenanceDaysBeforeService = SIZE  += 1;
    private static final int Offset$sCallCidTransmission = SIZE  += 1;
    private static final int Offset$sCallCidDtmf = SIZE  += 1;
    private static final int Offset$sCallAudioRouting = SIZE  += 1;
    private static final int Offset$scallDataTransmissionTime = SIZE  += 1;
    private static final int Offset$scallCidDtmfMsd = SIZE  += 1;
    
    }// tplMakeInitializer(ServiceCall_Setting) 
    
    {
        int currentOffset = 0;
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48 );
        currentOffset += 20;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 35 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 20 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ServiceCall_Setting other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] PrimaryRCall = new  byte[20];
 DO  final byte[] PrimaryICall = new  byte[20];
 DO  final byte[] SecondaryRCall = new  byte[20];
 DO  final byte[] SecondaryICall = new  byte[20];
 DO  final byte[] scallDtmf = new  byte[1];
 DO  final byte[] scallDpp_Timeout = new  byte[1];
 DO  final byte[] showDpp = new  byte[1];
 DO  final byte[] scallAtpDataTransmission = new  byte[1];
 DO  final byte[] scallInbandDataPull = new  byte[1];
 DO  final byte[] maintenanceDaysBeforeService = new  byte[1];
 DO  final byte[] sCallCidTransmission = new  byte[1];
 DO  final byte[] sCallCidDtmf = new  byte[1];
 DO  final byte[] sCallAudioRouting = new  byte[1];
 DO  final byte[] scallDataTransmissionTime = new  byte[1];
 DO  final byte[] scallCidDtmfMsd = new  byte[1];
--content--
  public ServiceCall_Setting( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Current Commstack Configuration */
public static class Current_Commstack_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Current_Commstack_Configuration) 
    private final byte[] _buffer = new byte[+4000];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Current_Commstack_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$Current_Commstack_Configuration = SIZE  += 4000;
    
    }// tplMakeInitializer(Current_Commstack_Configuration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 4000;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Current_Commstack_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Current_Commstack_Configuration = new  byte[4000];
--content--
  public Current_Commstack_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Current Cellular Antenna Switch Status */
public static class Current_Cellular_Antenna_Switch_Status {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Current_Cellular_Antenna_Switch_Status) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Current_Cellular_Antenna_Switch_Status) 
    
     private static int SIZE = 0;
    private static final int Offset$Cellular_Antenna_Switch_Status = SIZE  += 1;
    
    }// tplMakeInitializer(Current_Cellular_Antenna_Switch_Status) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Current_Cellular_Antenna_Switch_Status other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Cellular_Antenna_Switch_Status = new  byte[1];
--content--
  public Current_Cellular_Antenna_Switch_Status( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Current Antenna Switch State */
public static class Current_Antenna_Switch_State {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Current_Antenna_Switch_State) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Current_Antenna_Switch_State) 
    
     private static int SIZE = 0;
    private static final int Offset$Antenna_Switch_State = SIZE  += 1;
    
    }// tplMakeInitializer(Current_Antenna_Switch_State) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Current_Antenna_Switch_State other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] Antenna_Switch_State = new  byte[1];
--content--
  public Current_Antenna_Switch_State( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Configure SAR Trigger Events */
public static class Configure_SAR_Trigger_Events {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Configure_SAR_Trigger_Events) 
    private final byte[] _buffer = new byte[];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Configure_SAR_Trigger_Events) 
    
     private static int SIZE = 0;
    
    }// tplMakeInitializer(Configure_SAR_Trigger_Events) 
    
    {
        int currentOffset = 0;
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Configure_SAR_Trigger_Events other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

    --content--
  public Configure_SAR_Trigger_Events( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Activate SAR Data Storage */
public static class Activate_SAR_Data_Storage {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Activate_SAR_Data_Storage) 
    private final byte[] _buffer = new byte[+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Activate_SAR_Data_Storage) 
    
     private static int SIZE = 0;
    private static final int Offset$SAR_Data_Storage_Status = SIZE  += 1;
    
    }// tplMakeInitializer(Activate_SAR_Data_Storage) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Activate_SAR_Data_Storage other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SAR_Data_Storage_Status = new  byte[1];
--content--
  public Activate_SAR_Data_Storage( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** ActiveRootComstackConfiguration */
public static class ActiveRootComstackConfiguration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(ActiveRootComstackConfiguration) 
    private final byte[] _buffer = new byte[+101+101+101+101+101+101+101+101+101+101+101];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(ActiveRootComstackConfiguration) 
    
     private static int SIZE = 0;
    private static final int Offset$CATHI_InitCert = SIZE  += 101;
    private static final int Offset$CATHI_ClientCert = SIZE  += 101;
    private static final int Offset$CATHI_CertRevocation = SIZE  += 101;
    private static final int Offset$CATHI_SMSKey = SIZE  += 101;
    private static final int Offset$OMADM = SIZE  += 101;
    private static final int Offset$CommStack_Config = SIZE  += 101;
    private static final int Offset$MQTT_H = SIZE  += 101;
    private static final int Offset$MQTT_L = SIZE  += 101;
    private static final int Offset$NTP_URL_MAIN = SIZE  += 101;
    private static final int Offset$NTP_URL_BACKUP = SIZE  += 101;
    private static final int Offset$LOG_UPLOAD_URL = SIZE  += 101;
    
    }// tplMakeInitializer(ActiveRootComstackConfiguration) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
        // Empty.
        currentOffset += 101;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( ActiveRootComstackConfiguration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] CATHI_InitCert = new  byte[101];
 DO  final byte[] CATHI_ClientCert = new  byte[101];
 DO  final byte[] CATHI_CertRevocation = new  byte[101];
 DO  final byte[] CATHI_SMSKey = new  byte[101];
 DO  final byte[] OMADM = new  byte[101];
 DO  final byte[] CommStack_Config = new  byte[101];
 DO  final byte[] MQTT_H = new  byte[101];
 DO  final byte[] MQTT_L = new  byte[101];
 DO  final byte[] NTP_URL_MAIN = new  byte[101];
 DO  final byte[] NTP_URL_BACKUP = new  byte[101];
 DO  final byte[] LOG_UPLOAD_URL = new  byte[101];
--content--
  public ActiveRootComstackConfiguration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Vehicle_Configuration */
public static class Vehicle_Configuration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Vehicle_Configuration) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Vehicle_Configuration) 
    
     private static int SIZE = 0;
    private static final int Offset$connectionWithHu = SIZE  += 1;
    private static final int Offset$vehicleType = SIZE  += 1;
    private static final int Offset$MapMatchedPositioning = SIZE  += 1;
    private static final int Offset$offlineModeCapable = SIZE  += 1;
    private static final int Offset$productionModeCapable = SIZE  += 1;
    private static final int Offset$transportModeCapable = SIZE  += 1;
    private static final int Offset$carsharing = SIZE  += 1;
    private static final int Offset$FOTA_RSWDL_Support_1 = SIZE  += 1;
    private static final int Offset$tdpResetProhibition = SIZE  += 1;
    private static final int Offset$GPS_Antenna_Type = SIZE  += 1;
    
    }// tplMakeInitializer(Vehicle_Configuration) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Vehicle_Configuration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] connectionWithHu = new  byte[1];
 DO  final byte[] vehicleType = new  byte[1];
 DO  final byte[] MapMatchedPositioning = new  byte[1];
 DO  final byte[] offlineModeCapable = new  byte[1];
 DO  final byte[] productionModeCapable = new  byte[1];
 DO  final byte[] transportModeCapable = new  byte[1];
 DO  final byte[] carsharing = new  byte[1];
 DO  final byte[] FOTA_RSWDL_Support_1 = new  byte[1];
 DO  final byte[] tdpResetProhibition = new  byte[1];
 DO  final byte[] GPS_Antenna_Type = new  byte[1];
--content--
  public Vehicle_Configuration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** HU Connectivity Settings */
public static class HU_Connectivity_Settings {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(HU_Connectivity_Settings) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(HU_Connectivity_Settings) 
    
     private static int SIZE = 0;
    private static final int Offset$roamingIndicationViaWcc = SIZE  += 1;
    private static final int Offset$Provide_Internet_for_C20_BRR = SIZE  += 1;
    private static final int Offset$Provide_Internet_for_C5_BRR = SIZE  += 1;
    private static final int Offset$Provide_Internet_for_HSDL = SIZE  += 1;
    private static final int Offset$KeepaliveFailedProbes = SIZE  += 1;
    private static final int Offset$KeepaliveTime = SIZE  += 1;
    private static final int Offset$KeepaliveInterval = SIZE  += 1;
    
    }// tplMakeInitializer(HU_Connectivity_Settings) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 30 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( HU_Connectivity_Settings other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] roamingIndicationViaWcc = new  byte[1];
 DO  final byte[] Provide_Internet_for_C20_BRR = new  byte[1];
 DO  final byte[] Provide_Internet_for_C5_BRR = new  byte[1];
 DO  final byte[] Provide_Internet_for_HSDL = new  byte[1];
 DO  final byte[] KeepaliveFailedProbes = new  byte[1];
 DO  final byte[] KeepaliveTime = new  byte[1];
 DO  final byte[] KeepaliveInterval = new  byte[1];
--content--
  public HU_Connectivity_Settings( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** Stalled Connection Detection Ramses */
public static class Stalled_Connection_Detection_Ramses {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(Stalled_Connection_Detection_Ramses) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(Stalled_Connection_Detection_Ramses) 
    
     private static int SIZE = 0;
    private static final int Offset$SCD_RetryCounterMax = SIZE  += 1;
    private static final int Offset$SCD_MonitorTimer = SIZE  += 1;
    private static final int Offset$SCD_APN0_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN1_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN2_Enable = SIZE  += 1;
    private static final int Offset$SCD_APN3_Enable = SIZE  += 1;
    
    }// tplMakeInitializer(Stalled_Connection_Detection_Ramses) 
    
    {
        int currentOffset = 0;
        copyTo( 3 );
        currentOffset += 1;
      
        copyTo( 30 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 1 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( Stalled_Connection_Detection_Ramses other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] SCD_RetryCounterMax = new  byte[1];
 DO  final byte[] SCD_MonitorTimer = new  byte[1];
 DO  final byte[] SCD_APN0_Enable = new  byte[1];
 DO  final byte[] SCD_APN1_Enable = new  byte[1];
 DO  final byte[] SCD_APN2_Enable = new  byte[1];
 DO  final byte[] SCD_APN3_Enable = new  byte[1];
--content--
  public Stalled_Connection_Detection_Ramses( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TimeConfirguration */
public static class TimeConfirguration {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TimeConfirguration) 
    private final byte[] _buffer = new byte[+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TimeConfirguration) 
    
     private static int SIZE = 0;
    private static final int Offset$ThresholdSetTimeToFuture = SIZE  += 1;
    private static final int Offset$ThresholdSetTimeToPast = SIZE  += 1;
    private static final int Offset$maxTimeDeltaToSyncSource = SIZE  += 1;
    
    }// tplMakeInitializer(TimeConfirguration) 
    
    {
        int currentOffset = 0;
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 5 );
        currentOffset += 1;
      
        copyTo( 5 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TimeConfirguration other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] ThresholdSetTimeToFuture = new  byte[1];
 DO  final byte[] ThresholdSetTimeToPast = new  byte[1];
 DO  final byte[] maxTimeDeltaToSyncSource = new  byte[1];
--content--
  public TimeConfirguration( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** TCU_Internal_SW_Versions */
public static class TCU_Internal_SW_Versions {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(TCU_Internal_SW_Versions) 
    private final byte[] _buffer = new byte[+64+64+64+64+64+64+64+64+64+16+320+16+16+42+64+64];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(TCU_Internal_SW_Versions) 
    
     private static int SIZE = 0;
    private static final int Offset$VuC_Bootloader = SIZE  += 64;
    private static final int Offset$VuC_Application = SIZE  += 64;
    private static final int Offset$Vuc_HSM_Firmware = SIZE  += 64;
    private static final int Offset$VuCOther1_1 = SIZE  += 64;
    private static final int Offset$VuCOther2 = SIZE  += 64;
    private static final int Offset$SoC_Bootloader = SIZE  += 64;
    private static final int Offset$SoC_Linux_Kernel = SIZE  += 64;
    private static final int Offset$SoC_Linux_System = SIZE  += 64;
    private static final int Offset$Soc_Modem_Software = SIZE  += 64;
    private static final int Offset$eSim_Software = SIZE  += 16;
    private static final int Offset$SoC_Modem_Configuration = SIZE  += 320;
    private static final int Offset$SoC_FDB = SIZE  += 16;
    private static final int Offset$SoC_Persistence = SIZE  += 16;
    private static final int Offset$SoC_Valens_FW = SIZE  += 42;
    private static final int Offset$SoCOther1 = SIZE  += 64;
    private static final int Offset$SoCOther2 = SIZE  += 64;
    
    }// tplMakeInitializer(TCU_Internal_SW_Versions) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 320;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 16;
      
        // Empty.
        currentOffset += 42;
      
        // Empty.
        currentOffset += 64;
      
        // Empty.
        currentOffset += 64;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( TCU_Internal_SW_Versions other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] VuC_Bootloader = new  byte[64];
 DO  final byte[] VuC_Application = new  byte[64];
 DO  final byte[] Vuc_HSM_Firmware = new  byte[64];
 DO  final byte[] VuCOther1_1 = new  byte[64];
 DO  final byte[] VuCOther2 = new  byte[64];
 DO  final byte[] SoC_Bootloader = new  byte[64];
 DO  final byte[] SoC_Linux_Kernel = new  byte[64];
 DO  final byte[] SoC_Linux_System = new  byte[64];
 DO  final byte[] Soc_Modem_Software = new  byte[64];
 DO  final byte[] eSim_Software = new  byte[16];
 DO  final byte[] SoC_Modem_Configuration = new  byte[320];
 DO  final byte[] SoC_FDB = new  byte[16];
 DO  final byte[] SoC_Persistence = new  byte[16];
 DO  final byte[] SoC_Valens_FW = new  byte[42];
 DO  final byte[] SoCOther1 = new  byte[64];
 DO  final byte[] SoCOther2 = new  byte[64];
--content--
  public TCU_Internal_SW_Versions( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** GNSS_Position_Data */
public static class GNSS_Position_Data {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(GNSS_Position_Data) 
    private final byte[] _buffer = new byte[+1+255+255+255+1+255+255+255+1+255+255+255+1+1+1+1+1+255+255+255+1+255+255+255];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(GNSS_Position_Data) 
    
     private static int SIZE = 0;
    private static final int Offset$GPS_Latitude_Direction = SIZE  += 1;
    private static final int Offset$GPS_Latitude_Degrees = SIZE  += 255;
    private static final int Offset$GPS_Latitude_Minutes = SIZE  += 255;
    private static final int Offset$GPS_Latitude_Seconds = SIZE  += 255;
    private static final int Offset$GPS_Longitude_Direction = SIZE  += 1;
    private static final int Offset$GPS_Longitude_Degrees = SIZE  += 255;
    private static final int Offset$GPS_Longitude_Minutes = SIZE  += 255;
    private static final int Offset$GPS_Longitude_Seconds = SIZE  += 255;
    private static final int Offset$GPS_Fix = SIZE  += 1;
    private static final int Offset$GPS_Velocity = SIZE  += 255;
    private static final int Offset$GPS_Heading = SIZE  += 255;
    private static final int Offset$GPS_Altitude = SIZE  += 255;
    private static final int Offset$GPS_Visible_Satellites = SIZE  += 1;
    private static final int Offset$GPS_Satellites_Currently_Tracked = SIZE  += 1;
    private static final int Offset$GLONASS_Visible_Satellites = SIZE  += 1;
    private static final int Offset$GLONASS_Satellites_Currently_Tracked = SIZE  += 1;
    private static final int Offset$DR_Latitude_Direction = SIZE  += 1;
    private static final int Offset$DR_Latitude_Degrees = SIZE  += 255;
    private static final int Offset$DR_Latitude_Minutes = SIZE  += 255;
    private static final int Offset$DR_Latitude_Seconds = SIZE  += 255;
    private static final int Offset$DR_Longitude_Direction = SIZE  += 1;
    private static final int Offset$DR_Longitude_Degrees = SIZE  += 255;
    private static final int Offset$DR_Longitude_Minutes = SIZE  += 255;
    private static final int Offset$DR_Longitude_Seconds = SIZE  += 255;
    
    }// tplMakeInitializer(GNSS_Position_Data) 
    
    {
        int currentOffset = 0;
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 1;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
        // Empty.
        currentOffset += 255;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( GNSS_Position_Data other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] GPS_Latitude_Direction = new  byte[1];
 DO  final byte[] GPS_Latitude_Degrees = new  byte[255];
 DO  final byte[] GPS_Latitude_Minutes = new  byte[255];
 DO  final byte[] GPS_Latitude_Seconds = new  byte[255];
 DO  final byte[] GPS_Longitude_Direction = new  byte[1];
 DO  final byte[] GPS_Longitude_Degrees = new  byte[255];
 DO  final byte[] GPS_Longitude_Minutes = new  byte[255];
 DO  final byte[] GPS_Longitude_Seconds = new  byte[255];
 DO  final byte[] GPS_Fix = new  byte[1];
 DO  final byte[] GPS_Velocity = new  byte[255];
 DO  final byte[] GPS_Heading = new  byte[255];
 DO  final byte[] GPS_Altitude = new  byte[255];
 DO  final byte[] GPS_Visible_Satellites = new  byte[1];
 DO  final byte[] GPS_Satellites_Currently_Tracked = new  byte[1];
 DO  final byte[] GLONASS_Visible_Satellites = new  byte[1];
 DO  final byte[] GLONASS_Satellites_Currently_Tracked = new  byte[1];
 DO  final byte[] DR_Latitude_Direction = new  byte[1];
 DO  final byte[] DR_Latitude_Degrees = new  byte[255];
 DO  final byte[] DR_Latitude_Minutes = new  byte[255];
 DO  final byte[] DR_Latitude_Seconds = new  byte[255];
 DO  final byte[] DR_Longitude_Direction = new  byte[1];
 DO  final byte[] DR_Longitude_Degrees = new  byte[255];
 DO  final byte[] DR_Longitude_Minutes = new  byte[255];
 DO  final byte[] DR_Longitude_Seconds = new  byte[255];
--content--
  public GNSS_Position_Data( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag Communication Blacklist */
public static class RDiag_Communication_Blacklist {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_Communication_Blacklist) 
    private final byte[] _buffer = new byte[+600];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_Communication_Blacklist) 
    
     private static int SIZE = 0;
    private static final int Offset$RDiag_Communication_Blacklist = SIZE  += 600;
    
    }// tplMakeInitializer(RDiag_Communication_Blacklist) 
    
    {
        int currentOffset = 0;
        copyTo( 255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 );
        currentOffset += 600;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_Communication_Blacklist other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] RDiag_Communication_Blacklist = new  byte[600];
--content--
  public RDiag_Communication_Blacklist( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}

/** RDiag oVCI Default CommParam */
public static class RDiag_oVCI_Default_CommParam {

    /** 
     * The buffer holding the structure data.
     */
    // tplMakeBuffer(RDiag_oVCI_Default_CommParam) 
    private final byte[] _buffer = new byte[+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1];

    /** 
     *  Instance initializer.
     */
    // tplMakeOffsetList(RDiag_oVCI_Default_CommParam) 
    
     private static int SIZE = 0;
    private static final int Offset$CP_DoIPConnectionCloseDelay = SIZE  += 1;
    private static final int Offset$CP_ModifyTiming = SIZE  += 1;
    private static final int Offset$CP_NetworkTransmissionTime = SIZE  += 1;
    private static final int Offset$CP_P2Max_Ecu = SIZE  += 1;
    private static final int Offset$CP_P2Min = SIZE  += 1;
    private static final int Offset$CP_P3Phys = SIZE  += 1;
    private static final int Offset$CP_P6Max = SIZE  += 1;
    private static final int Offset$CP_P6Star = SIZE  += 1;
    private static final int Offset$CP_RC21CompletionTimeout = SIZE  += 1;
    private static final int Offset$CP_RC21Handling = SIZE  += 1;
    private static final int Offset$CP_RC21RequestTime = SIZE  += 1;
    private static final int Offset$CP_RC23CompletionTimeout = SIZE  += 1;
    private static final int Offset$CP_RC23Handling = SIZE  += 1;
    private static final int Offset$CP_RC23RequestTime = SIZE  += 1;
    private static final int Offset$CP_RC78CompletionTimeout = SIZE  += 1;
    private static final int Offset$CP_RC78Handling = SIZE  += 1;
    private static final int Offset$CP_RCByteOffset = SIZE  += 1;
    private static final int Offset$CP_DoIPRetryPeriod = SIZE  += 1;
    private static final int Offset$CP_SessionTiming_Ecu = SIZE  += 1;
    private static final int Offset$CP_SessionTimingOverride = SIZE  += 1;
    private static final int Offset$CP_DoIPDiagnosticAckTimeout = SIZE  += 1;
    private static final int Offset$CP_DoIPRoutingActivationTimeout = SIZE  += 1;
    
    }// tplMakeInitializer(RDiag_oVCI_Default_CommParam) 
    
    {
        int currentOffset = 0;
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 100000 );
        currentOffset += 1;
      
        copyTo( 50000 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 150000 );
        currentOffset += 1;
      
        copyTo( 1000000 );
        currentOffset += 1;
      
        copyTo( 10000000 );
        currentOffset += 1;
      
        copyTo( 1300000 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 10000 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 25000000 );
        currentOffset += 1;
      
        copyTo( 2 );
        currentOffset += 1;
      
        copyTo( 4294967295 );
        currentOffset += 1;
      
        copyTo( 1000000 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 0 );
        currentOffset += 1;
      
        copyTo( 2000000 );
        currentOffset += 1;
      
        copyTo( 1000000 );
        currentOffset += 1;
      
    }


    /**
     * Compare the Diagnostic identifiers.
     * @return true if the DIDs hold the same content.
     */
    public boolean isEquivalent( RDiag_oVCI_Default_CommParam other ) {
        return 0 == Array.compare( other._buffer, _buffer );
    }

     DO  final byte[] CP_DoIPConnectionCloseDelay = new  byte[1];
 DO  final byte[] CP_ModifyTiming = new  byte[1];
 DO  final byte[] CP_NetworkTransmissionTime = new  byte[1];
 DO  final byte[] CP_P2Max_Ecu = new  byte[1];
 DO  final byte[] CP_P2Min = new  byte[1];
 DO  final byte[] CP_P3Phys = new  byte[1];
 DO  final byte[] CP_P6Max = new  byte[1];
 DO  final byte[] CP_P6Star = new  byte[1];
 DO  final byte[] CP_RC21CompletionTimeout = new  byte[1];
 DO  final byte[] CP_RC21Handling = new  byte[1];
 DO  final byte[] CP_RC21RequestTime = new  byte[1];
 DO  final byte[] CP_RC23CompletionTimeout = new  byte[1];
 DO  final byte[] CP_RC23Handling = new  byte[1];
 DO  final byte[] CP_RC23RequestTime = new  byte[1];
 DO  final byte[] CP_RC78CompletionTimeout = new  byte[1];
 DO  final byte[] CP_RC78Handling = new  byte[1];
 DO  final byte[] CP_RCByteOffset = new  byte[1];
 DO  final byte[] CP_DoIPRetryPeriod = new  byte[1];
 DO  final byte[] CP_SessionTiming_Ecu = new  byte[1];
 DO  final byte[] CP_SessionTimingOverride = new  byte[1];
 DO  final byte[] CP_DoIPDiagnosticAckTimeout = new  byte[1];
 DO  final byte[] CP_DoIPRoutingActivationTimeout = new  byte[1];
--content--
  public RDiag_oVCI_Default_CommParam( byte[] data ) {
        System.arraycopy( data, 0, _buffer, 0, _buffer.length );
    }
}


}